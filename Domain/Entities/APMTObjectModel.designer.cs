#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.225
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Domain.Entities
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="APMT")]
	public partial class APMTObjectModelDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAccessRight(AccessRight instance);
    partial void UpdateAccessRight(AccessRight instance);
    partial void DeleteAccessRight(AccessRight instance);
    partial void InsertAssignedIssue(AssignedIssue instance);
    partial void UpdateAssignedIssue(AssignedIssue instance);
    partial void DeleteAssignedIssue(AssignedIssue instance);
    partial void InsertCompAttribute(CompAttribute instance);
    partial void UpdateCompAttribute(CompAttribute instance);
    partial void DeleteCompAttribute(CompAttribute instance);
    partial void InsertCompAttValue(CompAttValue instance);
    partial void UpdateCompAttValue(CompAttValue instance);
    partial void DeleteCompAttValue(CompAttValue instance);
    partial void InsertComponent(Component instance);
    partial void UpdateComponent(Component instance);
    partial void DeleteComponent(Component instance);
    partial void InsertEmpAttribute(EmpAttribute instance);
    partial void UpdateEmpAttribute(EmpAttribute instance);
    partial void DeleteEmpAttribute(EmpAttribute instance);
    partial void InsertEmpAttValue(EmpAttValue instance);
    partial void UpdateEmpAttValue(EmpAttValue instance);
    partial void DeleteEmpAttValue(EmpAttValue instance);
    partial void InsertEmployee(Employee instance);
    partial void UpdateEmployee(Employee instance);
    partial void DeleteEmployee(Employee instance);
    partial void InsertFavoriteProject(FavoriteProject instance);
    partial void UpdateFavoriteProject(FavoriteProject instance);
    partial void DeleteFavoriteProject(FavoriteProject instance);
    partial void InsertFieldType(FieldType instance);
    partial void UpdateFieldType(FieldType instance);
    partial void DeleteFieldType(FieldType instance);
    partial void InsertIssueAttribute(IssueAttribute instance);
    partial void UpdateIssueAttribute(IssueAttribute instance);
    partial void DeleteIssueAttribute(IssueAttribute instance);
    partial void InsertIssueAttValue(IssueAttValue instance);
    partial void UpdateIssueAttValue(IssueAttValue instance);
    partial void DeleteIssueAttValue(IssueAttValue instance);
    partial void InsertIssuePriority(IssuePriority instance);
    partial void UpdateIssuePriority(IssuePriority instance);
    partial void DeleteIssuePriority(IssuePriority instance);
    partial void InsertIssue(Issue instance);
    partial void UpdateIssue(Issue instance);
    partial void DeleteIssue(Issue instance);
    partial void InsertIssuesDependency(IssuesDependency instance);
    partial void UpdateIssuesDependency(IssuesDependency instance);
    partial void DeleteIssuesDependency(IssuesDependency instance);
    partial void InsertIssueType(IssueType instance);
    partial void UpdateIssueType(IssueType instance);
    partial void DeleteIssueType(IssueType instance);
    partial void InsertIssueWorkFlow(IssueWorkFlow instance);
    partial void UpdateIssueWorkFlow(IssueWorkFlow instance);
    partial void DeleteIssueWorkFlow(IssueWorkFlow instance);
    partial void InsertMeetingDetail(MeetingDetail instance);
    partial void UpdateMeetingDetail(MeetingDetail instance);
    partial void DeleteMeetingDetail(MeetingDetail instance);
    partial void InsertOrganization(Organization instance);
    partial void UpdateOrganization(Organization instance);
    partial void DeleteOrganization(Organization instance);
    partial void InsertOrgAttribute(OrgAttribute instance);
    partial void UpdateOrgAttribute(OrgAttribute instance);
    partial void DeleteOrgAttribute(OrgAttribute instance);
    partial void InsertOrgAttValue(OrgAttValue instance);
    partial void UpdateOrgAttValue(OrgAttValue instance);
    partial void DeleteOrgAttValue(OrgAttValue instance);
    partial void InsertPersonalNote(PersonalNote instance);
    partial void UpdatePersonalNote(PersonalNote instance);
    partial void DeletePersonalNote(PersonalNote instance);
    partial void InsertProjAttribute(ProjAttribute instance);
    partial void UpdateProjAttribute(ProjAttribute instance);
    partial void DeleteProjAttribute(ProjAttribute instance);
    partial void InsertProjAttValue(ProjAttValue instance);
    partial void UpdateProjAttValue(ProjAttValue instance);
    partial void DeleteProjAttValue(ProjAttValue instance);
    partial void InsertProjectRisk(ProjectRisk instance);
    partial void UpdateProjectRisk(ProjectRisk instance);
    partial void DeleteProjectRisk(ProjectRisk instance);
    partial void InsertProject(Project instance);
    partial void UpdateProject(Project instance);
    partial void DeleteProject(Project instance);
    partial void InsertProjectsBacklog(ProjectsBacklog instance);
    partial void UpdateProjectsBacklog(ProjectsBacklog instance);
    partial void DeleteProjectsBacklog(ProjectsBacklog instance);
    partial void InsertRegularExpression(RegularExpression instance);
    partial void UpdateRegularExpression(RegularExpression instance);
    partial void DeleteRegularExpression(RegularExpression instance);
    partial void InsertRiskCategory(RiskCategory instance);
    partial void UpdateRiskCategory(RiskCategory instance);
    partial void DeleteRiskCategory(RiskCategory instance);
    partial void InsertRisk(Risk instance);
    partial void UpdateRisk(Risk instance);
    partial void DeleteRisk(Risk instance);
    partial void InsertRoleRight(RoleRight instance);
    partial void UpdateRoleRight(RoleRight instance);
    partial void DeleteRoleRight(RoleRight instance);
    partial void InsertRole(Role instance);
    partial void UpdateRole(Role instance);
    partial void DeleteRole(Role instance);
    partial void InsertScrumMeeting(ScrumMeeting instance);
    partial void UpdateScrumMeeting(ScrumMeeting instance);
    partial void DeleteScrumMeeting(ScrumMeeting instance);
    partial void InsertSearchFilter(SearchFilter instance);
    partial void UpdateSearchFilter(SearchFilter instance);
    partial void DeleteSearchFilter(SearchFilter instance);
    partial void InsertSprintAttribute(SprintAttribute instance);
    partial void UpdateSprintAttribute(SprintAttribute instance);
    partial void DeleteSprintAttribute(SprintAttribute instance);
    partial void InsertSprintAttValue(SprintAttValue instance);
    partial void UpdateSprintAttValue(SprintAttValue instance);
    partial void DeleteSprintAttValue(SprintAttValue instance);
    partial void InsertSprintDailyEffort(SprintDailyEffort instance);
    partial void UpdateSprintDailyEffort(SprintDailyEffort instance);
    partial void DeleteSprintDailyEffort(SprintDailyEffort instance);
    partial void InsertSprint(Sprint instance);
    partial void UpdateSprint(Sprint instance);
    partial void DeleteSprint(Sprint instance);
    partial void InsertSprintsBacklog(SprintsBacklog instance);
    partial void UpdateSprintsBacklog(SprintsBacklog instance);
    partial void DeleteSprintsBacklog(SprintsBacklog instance);
    partial void InsertSubCompAttribute(SubCompAttribute instance);
    partial void UpdateSubCompAttribute(SubCompAttribute instance);
    partial void DeleteSubCompAttribute(SubCompAttribute instance);
    partial void InsertSubCompAttValue(SubCompAttValue instance);
    partial void UpdateSubCompAttValue(SubCompAttValue instance);
    partial void DeleteSubCompAttValue(SubCompAttValue instance);
    partial void InsertSubComponent(SubComponent instance);
    partial void UpdateSubComponent(SubComponent instance);
    partial void DeleteSubComponent(SubComponent instance);
    #endregion
		
		public APMTObjectModelDataContext() : 
				base(global::Domain.Properties.Settings.Default.APMTConnectionString2, mappingSource)
		{
			OnCreated();
		}
		
		public APMTObjectModelDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public APMTObjectModelDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public APMTObjectModelDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public APMTObjectModelDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<AccessRight> AccessRights
		{
			get
			{
				return this.GetTable<AccessRight>();
			}
		}
		
		public System.Data.Linq.Table<AssignedIssue> AssignedIssues
		{
			get
			{
				return this.GetTable<AssignedIssue>();
			}
		}
		
		public System.Data.Linq.Table<CompAttribute> CompAttributes
		{
			get
			{
				return this.GetTable<CompAttribute>();
			}
		}
		
		public System.Data.Linq.Table<CompAttValue> CompAttValues
		{
			get
			{
				return this.GetTable<CompAttValue>();
			}
		}
		
		public System.Data.Linq.Table<Component> Components
		{
			get
			{
				return this.GetTable<Component>();
			}
		}
		
		public System.Data.Linq.Table<EmpAttribute> EmpAttributes
		{
			get
			{
				return this.GetTable<EmpAttribute>();
			}
		}
		
		public System.Data.Linq.Table<EmpAttValue> EmpAttValues
		{
			get
			{
				return this.GetTable<EmpAttValue>();
			}
		}
		
		public System.Data.Linq.Table<Employee> Employees
		{
			get
			{
				return this.GetTable<Employee>();
			}
		}
		
		public System.Data.Linq.Table<FavoriteProject> FavoriteProjects
		{
			get
			{
				return this.GetTable<FavoriteProject>();
			}
		}
		
		public System.Data.Linq.Table<FieldType> FieldTypes
		{
			get
			{
				return this.GetTable<FieldType>();
			}
		}
		
		public System.Data.Linq.Table<IssueAttribute> IssueAttributes
		{
			get
			{
				return this.GetTable<IssueAttribute>();
			}
		}
		
		public System.Data.Linq.Table<IssueAttValue> IssueAttValues
		{
			get
			{
				return this.GetTable<IssueAttValue>();
			}
		}
		
		public System.Data.Linq.Table<IssuePriority> IssuePriorities
		{
			get
			{
				return this.GetTable<IssuePriority>();
			}
		}
		
		public System.Data.Linq.Table<Issue> Issues
		{
			get
			{
				return this.GetTable<Issue>();
			}
		}
		
		public System.Data.Linq.Table<IssuesDependency> IssuesDependencies
		{
			get
			{
				return this.GetTable<IssuesDependency>();
			}
		}
		
		public System.Data.Linq.Table<IssueType> IssueTypes
		{
			get
			{
				return this.GetTable<IssueType>();
			}
		}
		
		public System.Data.Linq.Table<IssueWorkFlow> IssueWorkFlows
		{
			get
			{
				return this.GetTable<IssueWorkFlow>();
			}
		}
		
		public System.Data.Linq.Table<MeetingDetail> MeetingDetails
		{
			get
			{
				return this.GetTable<MeetingDetail>();
			}
		}
		
		public System.Data.Linq.Table<Organization> Organizations
		{
			get
			{
				return this.GetTable<Organization>();
			}
		}
		
		public System.Data.Linq.Table<OrgAttribute> OrgAttributes
		{
			get
			{
				return this.GetTable<OrgAttribute>();
			}
		}
		
		public System.Data.Linq.Table<OrgAttValue> OrgAttValues
		{
			get
			{
				return this.GetTable<OrgAttValue>();
			}
		}
		
		public System.Data.Linq.Table<PersonalNote> PersonalNotes
		{
			get
			{
				return this.GetTable<PersonalNote>();
			}
		}
		
		public System.Data.Linq.Table<ProjAttribute> ProjAttributes
		{
			get
			{
				return this.GetTable<ProjAttribute>();
			}
		}
		
		public System.Data.Linq.Table<ProjAttValue> ProjAttValues
		{
			get
			{
				return this.GetTable<ProjAttValue>();
			}
		}
		
		public System.Data.Linq.Table<ProjectRisk> ProjectRisks
		{
			get
			{
				return this.GetTable<ProjectRisk>();
			}
		}
		
		public System.Data.Linq.Table<Project> Projects
		{
			get
			{
				return this.GetTable<Project>();
			}
		}
		
		public System.Data.Linq.Table<ProjectsBacklog> ProjectsBacklogs
		{
			get
			{
				return this.GetTable<ProjectsBacklog>();
			}
		}
		
		public System.Data.Linq.Table<RegularExpression> RegularExpressions
		{
			get
			{
				return this.GetTable<RegularExpression>();
			}
		}
		
		public System.Data.Linq.Table<RiskCategory> RiskCategories
		{
			get
			{
				return this.GetTable<RiskCategory>();
			}
		}
		
		public System.Data.Linq.Table<Risk> Risks
		{
			get
			{
				return this.GetTable<Risk>();
			}
		}
		
		public System.Data.Linq.Table<RoleRight> RoleRights
		{
			get
			{
				return this.GetTable<RoleRight>();
			}
		}
		
		public System.Data.Linq.Table<Role> Roles
		{
			get
			{
				return this.GetTable<Role>();
			}
		}
		
		public System.Data.Linq.Table<ScrumMeeting> ScrumMeetings
		{
			get
			{
				return this.GetTable<ScrumMeeting>();
			}
		}
		
		public System.Data.Linq.Table<SearchFilter> SearchFilters
		{
			get
			{
				return this.GetTable<SearchFilter>();
			}
		}
		
		public System.Data.Linq.Table<SprintAttribute> SprintAttributes
		{
			get
			{
				return this.GetTable<SprintAttribute>();
			}
		}
		
		public System.Data.Linq.Table<SprintAttValue> SprintAttValues
		{
			get
			{
				return this.GetTable<SprintAttValue>();
			}
		}
		
		public System.Data.Linq.Table<SprintDailyEffort> SprintDailyEfforts
		{
			get
			{
				return this.GetTable<SprintDailyEffort>();
			}
		}
		
		public System.Data.Linq.Table<Sprint> Sprints
		{
			get
			{
				return this.GetTable<Sprint>();
			}
		}
		
		public System.Data.Linq.Table<SprintsBacklog> SprintsBacklogs
		{
			get
			{
				return this.GetTable<SprintsBacklog>();
			}
		}
		
		public System.Data.Linq.Table<SubCompAttribute> SubCompAttributes
		{
			get
			{
				return this.GetTable<SubCompAttribute>();
			}
		}
		
		public System.Data.Linq.Table<SubCompAttValue> SubCompAttValues
		{
			get
			{
				return this.GetTable<SubCompAttValue>();
			}
		}
		
		public System.Data.Linq.Table<SubComponent> SubComponents
		{
			get
			{
				return this.GetTable<SubComponent>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AccessRights")]
	public partial class AccessRight : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RightID;
		
		private string _Value;
		
		private string _Description;
		
		private EntitySet<RoleRight> _RoleRights;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRightIDChanging(int value);
    partial void OnRightIDChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public AccessRight()
		{
			this._RoleRights = new EntitySet<RoleRight>(new Action<RoleRight>(this.attach_RoleRights), new Action<RoleRight>(this.detach_RoleRights));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RightID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RightID
		{
			get
			{
				return this._RightID;
			}
			set
			{
				if ((this._RightID != value))
				{
					this.OnRightIDChanging(value);
					this.SendPropertyChanging();
					this._RightID = value;
					this.SendPropertyChanged("RightID");
					this.OnRightIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccessRight_RoleRight", Storage="_RoleRights", ThisKey="RightID", OtherKey="RightID")]
		public EntitySet<RoleRight> RoleRights
		{
			get
			{
				return this._RoleRights;
			}
			set
			{
				this._RoleRights.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RoleRights(RoleRight entity)
		{
			this.SendPropertyChanging();
			entity.AccessRight = this;
		}
		
		private void detach_RoleRights(RoleRight entity)
		{
			this.SendPropertyChanging();
			entity.AccessRight = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AssignedIssues")]
	public partial class AssignedIssue : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _EmpID;
		
		private long _IssueID;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<Issue> _Issue;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmpIDChanging(long value);
    partial void OnEmpIDChanged();
    partial void OnIssueIDChanging(long value);
    partial void OnIssueIDChanged();
    #endregion
		
		public AssignedIssue()
		{
			this._Employee = default(EntityRef<Employee>);
			this._Issue = default(EntityRef<Issue>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmpID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long EmpID
		{
			get
			{
				return this._EmpID;
			}
			set
			{
				if ((this._EmpID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmpIDChanging(value);
					this.SendPropertyChanging();
					this._EmpID = value;
					this.SendPropertyChanged("EmpID");
					this.OnEmpIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IssueID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long IssueID
		{
			get
			{
				return this._IssueID;
			}
			set
			{
				if ((this._IssueID != value))
				{
					if (this._Issue.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIssueIDChanging(value);
					this.SendPropertyChanging();
					this._IssueID = value;
					this.SendPropertyChanged("IssueID");
					this.OnIssueIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_AssignedIssue", Storage="_Employee", ThisKey="EmpID", OtherKey="EmpID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.AssignedIssues.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.AssignedIssues.Add(this);
						this._EmpID = value.EmpID;
					}
					else
					{
						this._EmpID = default(long);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Issue_AssignedIssue", Storage="_Issue", ThisKey="IssueID", OtherKey="IssueID", IsForeignKey=true)]
		public Issue Issue
		{
			get
			{
				return this._Issue.Entity;
			}
			set
			{
				Issue previousValue = this._Issue.Entity;
				if (((previousValue != value) 
							|| (this._Issue.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Issue.Entity = null;
						previousValue.AssignedIssues.Remove(this);
					}
					this._Issue.Entity = value;
					if ((value != null))
					{
						value.AssignedIssues.Add(this);
						this._IssueID = value.IssueID;
					}
					else
					{
						this._IssueID = default(long);
					}
					this.SendPropertyChanged("Issue");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CompAttributes")]
	public partial class CompAttribute : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CompAttID;
		
		private string _CompAttName;
		
		private int _FieldType;
		
		private string _DefaultValue;
		
		private bool _CanNull;
		
		private System.Nullable<int> _RegularExpression;
		
		private bool _IsSystemLevel;
		
		private EntitySet<CompAttValue> _CompAttValues;
		
		private EntityRef<FieldType> _FieldType1;
		
		private EntityRef<RegularExpression> _RegularExpression1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCompAttIDChanging(int value);
    partial void OnCompAttIDChanged();
    partial void OnCompAttNameChanging(string value);
    partial void OnCompAttNameChanged();
    partial void OnFieldTypeChanging(int value);
    partial void OnFieldTypeChanged();
    partial void OnDefaultValueChanging(string value);
    partial void OnDefaultValueChanged();
    partial void OnCanNullChanging(bool value);
    partial void OnCanNullChanged();
    partial void OnRegularExpressionChanging(System.Nullable<int> value);
    partial void OnRegularExpressionChanged();
    partial void OnIsSystemLevelChanging(bool value);
    partial void OnIsSystemLevelChanged();
    #endregion
		
		public CompAttribute()
		{
			this._CompAttValues = new EntitySet<CompAttValue>(new Action<CompAttValue>(this.attach_CompAttValues), new Action<CompAttValue>(this.detach_CompAttValues));
			this._FieldType1 = default(EntityRef<FieldType>);
			this._RegularExpression1 = default(EntityRef<RegularExpression>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompAttID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CompAttID
		{
			get
			{
				return this._CompAttID;
			}
			set
			{
				if ((this._CompAttID != value))
				{
					this.OnCompAttIDChanging(value);
					this.SendPropertyChanging();
					this._CompAttID = value;
					this.SendPropertyChanged("CompAttID");
					this.OnCompAttIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompAttName", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string CompAttName
		{
			get
			{
				return this._CompAttName;
			}
			set
			{
				if ((this._CompAttName != value))
				{
					this.OnCompAttNameChanging(value);
					this.SendPropertyChanging();
					this._CompAttName = value;
					this.SendPropertyChanged("CompAttName");
					this.OnCompAttNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FieldType", DbType="Int NOT NULL")]
		public int FieldType
		{
			get
			{
				return this._FieldType;
			}
			set
			{
				if ((this._FieldType != value))
				{
					if (this._FieldType1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFieldTypeChanging(value);
					this.SendPropertyChanging();
					this._FieldType = value;
					this.SendPropertyChanged("FieldType");
					this.OnFieldTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DefaultValue", DbType="VarChar(MAX)")]
		public string DefaultValue
		{
			get
			{
				return this._DefaultValue;
			}
			set
			{
				if ((this._DefaultValue != value))
				{
					this.OnDefaultValueChanging(value);
					this.SendPropertyChanging();
					this._DefaultValue = value;
					this.SendPropertyChanged("DefaultValue");
					this.OnDefaultValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CanNull", DbType="Bit NOT NULL")]
		public bool CanNull
		{
			get
			{
				return this._CanNull;
			}
			set
			{
				if ((this._CanNull != value))
				{
					this.OnCanNullChanging(value);
					this.SendPropertyChanging();
					this._CanNull = value;
					this.SendPropertyChanged("CanNull");
					this.OnCanNullChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegularExpression", DbType="Int")]
		public System.Nullable<int> RegularExpression
		{
			get
			{
				return this._RegularExpression;
			}
			set
			{
				if ((this._RegularExpression != value))
				{
					if (this._RegularExpression1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRegularExpressionChanging(value);
					this.SendPropertyChanging();
					this._RegularExpression = value;
					this.SendPropertyChanged("RegularExpression");
					this.OnRegularExpressionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsSystemLevel", DbType="Bit NOT NULL")]
		public bool IsSystemLevel
		{
			get
			{
				return this._IsSystemLevel;
			}
			set
			{
				if ((this._IsSystemLevel != value))
				{
					this.OnIsSystemLevelChanging(value);
					this.SendPropertyChanging();
					this._IsSystemLevel = value;
					this.SendPropertyChanged("IsSystemLevel");
					this.OnIsSystemLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CompAttribute_CompAttValue", Storage="_CompAttValues", ThisKey="CompAttID", OtherKey="CompAttID")]
		public EntitySet<CompAttValue> CompAttValues
		{
			get
			{
				return this._CompAttValues;
			}
			set
			{
				this._CompAttValues.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FieldType_CompAttribute", Storage="_FieldType1", ThisKey="FieldType", OtherKey="FieldID", IsForeignKey=true)]
		public FieldType FieldType1
		{
			get
			{
				return this._FieldType1.Entity;
			}
			set
			{
				FieldType previousValue = this._FieldType1.Entity;
				if (((previousValue != value) 
							|| (this._FieldType1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FieldType1.Entity = null;
						previousValue.CompAttributes.Remove(this);
					}
					this._FieldType1.Entity = value;
					if ((value != null))
					{
						value.CompAttributes.Add(this);
						this._FieldType = value.FieldID;
					}
					else
					{
						this._FieldType = default(int);
					}
					this.SendPropertyChanged("FieldType1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RegularExpression_CompAttribute", Storage="_RegularExpression1", ThisKey="RegularExpression", OtherKey="ExpressionID", IsForeignKey=true)]
		public RegularExpression RegularExpression1
		{
			get
			{
				return this._RegularExpression1.Entity;
			}
			set
			{
				RegularExpression previousValue = this._RegularExpression1.Entity;
				if (((previousValue != value) 
							|| (this._RegularExpression1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RegularExpression1.Entity = null;
						previousValue.CompAttributes.Remove(this);
					}
					this._RegularExpression1.Entity = value;
					if ((value != null))
					{
						value.CompAttributes.Add(this);
						this._RegularExpression = value.ExpressionID;
					}
					else
					{
						this._RegularExpression = default(Nullable<int>);
					}
					this.SendPropertyChanged("RegularExpression1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CompAttValues(CompAttValue entity)
		{
			this.SendPropertyChanging();
			entity.CompAttribute = this;
		}
		
		private void detach_CompAttValues(CompAttValue entity)
		{
			this.SendPropertyChanging();
			entity.CompAttribute = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CompAttValues")]
	public partial class CompAttValue : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _CompID;
		
		private int _CompAttID;
		
		private string _Value;
		
		private EntityRef<CompAttribute> _CompAttribute;
		
		private EntityRef<Component> _Component;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCompIDChanging(long value);
    partial void OnCompIDChanged();
    partial void OnCompAttIDChanging(int value);
    partial void OnCompAttIDChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    #endregion
		
		public CompAttValue()
		{
			this._CompAttribute = default(EntityRef<CompAttribute>);
			this._Component = default(EntityRef<Component>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long CompID
		{
			get
			{
				return this._CompID;
			}
			set
			{
				if ((this._CompID != value))
				{
					if (this._Component.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompIDChanging(value);
					this.SendPropertyChanging();
					this._CompID = value;
					this.SendPropertyChanged("CompID");
					this.OnCompIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompAttID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CompAttID
		{
			get
			{
				return this._CompAttID;
			}
			set
			{
				if ((this._CompAttID != value))
				{
					if (this._CompAttribute.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompAttIDChanging(value);
					this.SendPropertyChanging();
					this._CompAttID = value;
					this.SendPropertyChanged("CompAttID");
					this.OnCompAttIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="VarChar(MAX)")]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CompAttribute_CompAttValue", Storage="_CompAttribute", ThisKey="CompAttID", OtherKey="CompAttID", IsForeignKey=true)]
		public CompAttribute CompAttribute
		{
			get
			{
				return this._CompAttribute.Entity;
			}
			set
			{
				CompAttribute previousValue = this._CompAttribute.Entity;
				if (((previousValue != value) 
							|| (this._CompAttribute.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CompAttribute.Entity = null;
						previousValue.CompAttValues.Remove(this);
					}
					this._CompAttribute.Entity = value;
					if ((value != null))
					{
						value.CompAttValues.Add(this);
						this._CompAttID = value.CompAttID;
					}
					else
					{
						this._CompAttID = default(int);
					}
					this.SendPropertyChanged("CompAttribute");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Component_CompAttValue", Storage="_Component", ThisKey="CompID", OtherKey="CompID", IsForeignKey=true)]
		public Component Component
		{
			get
			{
				return this._Component.Entity;
			}
			set
			{
				Component previousValue = this._Component.Entity;
				if (((previousValue != value) 
							|| (this._Component.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Component.Entity = null;
						previousValue.CompAttValues.Remove(this);
					}
					this._Component.Entity = value;
					if ((value != null))
					{
						value.CompAttValues.Add(this);
						this._CompID = value.CompID;
					}
					else
					{
						this._CompID = default(long);
					}
					this.SendPropertyChanged("Component");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Components")]
	public partial class Component : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _CompID;
		
		private long _ProjID;
		
		private EntitySet<CompAttValue> _CompAttValues;
		
		private EntitySet<SubComponent> _SubComponents;
		
		private EntityRef<Project> _Project;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCompIDChanging(long value);
    partial void OnCompIDChanged();
    partial void OnProjIDChanging(long value);
    partial void OnProjIDChanged();
    #endregion
		
		public Component()
		{
			this._CompAttValues = new EntitySet<CompAttValue>(new Action<CompAttValue>(this.attach_CompAttValues), new Action<CompAttValue>(this.detach_CompAttValues));
			this._SubComponents = new EntitySet<SubComponent>(new Action<SubComponent>(this.attach_SubComponents), new Action<SubComponent>(this.detach_SubComponents));
			this._Project = default(EntityRef<Project>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long CompID
		{
			get
			{
				return this._CompID;
			}
			set
			{
				if ((this._CompID != value))
				{
					this.OnCompIDChanging(value);
					this.SendPropertyChanging();
					this._CompID = value;
					this.SendPropertyChanged("CompID");
					this.OnCompIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjID", DbType="BigInt NOT NULL")]
		public long ProjID
		{
			get
			{
				return this._ProjID;
			}
			set
			{
				if ((this._ProjID != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjIDChanging(value);
					this.SendPropertyChanging();
					this._ProjID = value;
					this.SendPropertyChanged("ProjID");
					this.OnProjIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Component_CompAttValue", Storage="_CompAttValues", ThisKey="CompID", OtherKey="CompID")]
		public EntitySet<CompAttValue> CompAttValues
		{
			get
			{
				return this._CompAttValues;
			}
			set
			{
				this._CompAttValues.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Component_SubComponent", Storage="_SubComponents", ThisKey="CompID", OtherKey="CompID")]
		public EntitySet<SubComponent> SubComponents
		{
			get
			{
				return this._SubComponents;
			}
			set
			{
				this._SubComponents.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_Component", Storage="_Project", ThisKey="ProjID", OtherKey="ProjID", IsForeignKey=true)]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.Components.Remove(this);
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.Components.Add(this);
						this._ProjID = value.ProjID;
					}
					else
					{
						this._ProjID = default(long);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CompAttValues(CompAttValue entity)
		{
			this.SendPropertyChanging();
			entity.Component = this;
		}
		
		private void detach_CompAttValues(CompAttValue entity)
		{
			this.SendPropertyChanging();
			entity.Component = null;
		}
		
		private void attach_SubComponents(SubComponent entity)
		{
			this.SendPropertyChanging();
			entity.Component = this;
		}
		
		private void detach_SubComponents(SubComponent entity)
		{
			this.SendPropertyChanging();
			entity.Component = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EmpAttributes")]
	public partial class EmpAttribute : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EmpAttID;
		
		private string _EmpAttName;
		
		private int _FieldType;
		
		private string _DefaultValue;
		
		private bool _CanNull;
		
		private System.Nullable<int> _RegularExpression;
		
		private bool _IsSystemLevel;
		
		private EntitySet<EmpAttValue> _EmpAttValues;
		
		private EntityRef<FieldType> _FieldType1;
		
		private EntityRef<RegularExpression> _RegularExpression1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmpAttIDChanging(int value);
    partial void OnEmpAttIDChanged();
    partial void OnEmpAttNameChanging(string value);
    partial void OnEmpAttNameChanged();
    partial void OnFieldTypeChanging(int value);
    partial void OnFieldTypeChanged();
    partial void OnDefaultValueChanging(string value);
    partial void OnDefaultValueChanged();
    partial void OnCanNullChanging(bool value);
    partial void OnCanNullChanged();
    partial void OnRegularExpressionChanging(System.Nullable<int> value);
    partial void OnRegularExpressionChanged();
    partial void OnIsSystemLevelChanging(bool value);
    partial void OnIsSystemLevelChanged();
    #endregion
		
		public EmpAttribute()
		{
			this._EmpAttValues = new EntitySet<EmpAttValue>(new Action<EmpAttValue>(this.attach_EmpAttValues), new Action<EmpAttValue>(this.detach_EmpAttValues));
			this._FieldType1 = default(EntityRef<FieldType>);
			this._RegularExpression1 = default(EntityRef<RegularExpression>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmpAttID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EmpAttID
		{
			get
			{
				return this._EmpAttID;
			}
			set
			{
				if ((this._EmpAttID != value))
				{
					this.OnEmpAttIDChanging(value);
					this.SendPropertyChanging();
					this._EmpAttID = value;
					this.SendPropertyChanged("EmpAttID");
					this.OnEmpAttIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmpAttName", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string EmpAttName
		{
			get
			{
				return this._EmpAttName;
			}
			set
			{
				if ((this._EmpAttName != value))
				{
					this.OnEmpAttNameChanging(value);
					this.SendPropertyChanging();
					this._EmpAttName = value;
					this.SendPropertyChanged("EmpAttName");
					this.OnEmpAttNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FieldType", DbType="Int NOT NULL")]
		public int FieldType
		{
			get
			{
				return this._FieldType;
			}
			set
			{
				if ((this._FieldType != value))
				{
					if (this._FieldType1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFieldTypeChanging(value);
					this.SendPropertyChanging();
					this._FieldType = value;
					this.SendPropertyChanged("FieldType");
					this.OnFieldTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DefaultValue", DbType="VarChar(MAX)")]
		public string DefaultValue
		{
			get
			{
				return this._DefaultValue;
			}
			set
			{
				if ((this._DefaultValue != value))
				{
					this.OnDefaultValueChanging(value);
					this.SendPropertyChanging();
					this._DefaultValue = value;
					this.SendPropertyChanged("DefaultValue");
					this.OnDefaultValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CanNull", DbType="Bit NOT NULL")]
		public bool CanNull
		{
			get
			{
				return this._CanNull;
			}
			set
			{
				if ((this._CanNull != value))
				{
					this.OnCanNullChanging(value);
					this.SendPropertyChanging();
					this._CanNull = value;
					this.SendPropertyChanged("CanNull");
					this.OnCanNullChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegularExpression", DbType="Int")]
		public System.Nullable<int> RegularExpression
		{
			get
			{
				return this._RegularExpression;
			}
			set
			{
				if ((this._RegularExpression != value))
				{
					if (this._RegularExpression1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRegularExpressionChanging(value);
					this.SendPropertyChanging();
					this._RegularExpression = value;
					this.SendPropertyChanged("RegularExpression");
					this.OnRegularExpressionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsSystemLevel", DbType="Bit NOT NULL")]
		public bool IsSystemLevel
		{
			get
			{
				return this._IsSystemLevel;
			}
			set
			{
				if ((this._IsSystemLevel != value))
				{
					this.OnIsSystemLevelChanging(value);
					this.SendPropertyChanging();
					this._IsSystemLevel = value;
					this.SendPropertyChanged("IsSystemLevel");
					this.OnIsSystemLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EmpAttribute_EmpAttValue", Storage="_EmpAttValues", ThisKey="EmpAttID", OtherKey="EmpAttID")]
		public EntitySet<EmpAttValue> EmpAttValues
		{
			get
			{
				return this._EmpAttValues;
			}
			set
			{
				this._EmpAttValues.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FieldType_EmpAttribute", Storage="_FieldType1", ThisKey="FieldType", OtherKey="FieldID", IsForeignKey=true)]
		public FieldType FieldType1
		{
			get
			{
				return this._FieldType1.Entity;
			}
			set
			{
				FieldType previousValue = this._FieldType1.Entity;
				if (((previousValue != value) 
							|| (this._FieldType1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FieldType1.Entity = null;
						previousValue.EmpAttributes.Remove(this);
					}
					this._FieldType1.Entity = value;
					if ((value != null))
					{
						value.EmpAttributes.Add(this);
						this._FieldType = value.FieldID;
					}
					else
					{
						this._FieldType = default(int);
					}
					this.SendPropertyChanged("FieldType1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RegularExpression_EmpAttribute", Storage="_RegularExpression1", ThisKey="RegularExpression", OtherKey="ExpressionID", IsForeignKey=true)]
		public RegularExpression RegularExpression1
		{
			get
			{
				return this._RegularExpression1.Entity;
			}
			set
			{
				RegularExpression previousValue = this._RegularExpression1.Entity;
				if (((previousValue != value) 
							|| (this._RegularExpression1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RegularExpression1.Entity = null;
						previousValue.EmpAttributes.Remove(this);
					}
					this._RegularExpression1.Entity = value;
					if ((value != null))
					{
						value.EmpAttributes.Add(this);
						this._RegularExpression = value.ExpressionID;
					}
					else
					{
						this._RegularExpression = default(Nullable<int>);
					}
					this.SendPropertyChanged("RegularExpression1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EmpAttValues(EmpAttValue entity)
		{
			this.SendPropertyChanging();
			entity.EmpAttribute = this;
		}
		
		private void detach_EmpAttValues(EmpAttValue entity)
		{
			this.SendPropertyChanging();
			entity.EmpAttribute = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EmpAttValues")]
	public partial class EmpAttValue : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _EmpID;
		
		private int _EmpAttID;
		
		private string _Value;
		
		private EntityRef<EmpAttribute> _EmpAttribute;
		
		private EntityRef<Employee> _Employee;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmpIDChanging(long value);
    partial void OnEmpIDChanged();
    partial void OnEmpAttIDChanging(int value);
    partial void OnEmpAttIDChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    #endregion
		
		public EmpAttValue()
		{
			this._EmpAttribute = default(EntityRef<EmpAttribute>);
			this._Employee = default(EntityRef<Employee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmpID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long EmpID
		{
			get
			{
				return this._EmpID;
			}
			set
			{
				if ((this._EmpID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmpIDChanging(value);
					this.SendPropertyChanging();
					this._EmpID = value;
					this.SendPropertyChanged("EmpID");
					this.OnEmpIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmpAttID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int EmpAttID
		{
			get
			{
				return this._EmpAttID;
			}
			set
			{
				if ((this._EmpAttID != value))
				{
					if (this._EmpAttribute.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmpAttIDChanging(value);
					this.SendPropertyChanging();
					this._EmpAttID = value;
					this.SendPropertyChanged("EmpAttID");
					this.OnEmpAttIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="VarChar(MAX)")]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EmpAttribute_EmpAttValue", Storage="_EmpAttribute", ThisKey="EmpAttID", OtherKey="EmpAttID", IsForeignKey=true)]
		public EmpAttribute EmpAttribute
		{
			get
			{
				return this._EmpAttribute.Entity;
			}
			set
			{
				EmpAttribute previousValue = this._EmpAttribute.Entity;
				if (((previousValue != value) 
							|| (this._EmpAttribute.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmpAttribute.Entity = null;
						previousValue.EmpAttValues.Remove(this);
					}
					this._EmpAttribute.Entity = value;
					if ((value != null))
					{
						value.EmpAttValues.Add(this);
						this._EmpAttID = value.EmpAttID;
					}
					else
					{
						this._EmpAttID = default(int);
					}
					this.SendPropertyChanged("EmpAttribute");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_EmpAttValue", Storage="_Employee", ThisKey="EmpID", OtherKey="EmpID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.EmpAttValues.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.EmpAttValues.Add(this);
						this._EmpID = value.EmpID;
					}
					else
					{
						this._EmpID = default(long);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Employees")]
	public partial class Employee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _EmpID;
		
		private EntitySet<AssignedIssue> _AssignedIssues;
		
		private EntitySet<EmpAttValue> _EmpAttValues;
		
		private EntitySet<FavoriteProject> _FavoriteProjects;
		
		private EntitySet<MeetingDetail> _MeetingDetails;
		
		private EntitySet<PersonalNote> _PersonalNotes;
		
		private EntitySet<SearchFilter> _SearchFilters;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmpIDChanging(long value);
    partial void OnEmpIDChanged();
    #endregion
		
		public Employee()
		{
			this._AssignedIssues = new EntitySet<AssignedIssue>(new Action<AssignedIssue>(this.attach_AssignedIssues), new Action<AssignedIssue>(this.detach_AssignedIssues));
			this._EmpAttValues = new EntitySet<EmpAttValue>(new Action<EmpAttValue>(this.attach_EmpAttValues), new Action<EmpAttValue>(this.detach_EmpAttValues));
			this._FavoriteProjects = new EntitySet<FavoriteProject>(new Action<FavoriteProject>(this.attach_FavoriteProjects), new Action<FavoriteProject>(this.detach_FavoriteProjects));
			this._MeetingDetails = new EntitySet<MeetingDetail>(new Action<MeetingDetail>(this.attach_MeetingDetails), new Action<MeetingDetail>(this.detach_MeetingDetails));
			this._PersonalNotes = new EntitySet<PersonalNote>(new Action<PersonalNote>(this.attach_PersonalNotes), new Action<PersonalNote>(this.detach_PersonalNotes));
			this._SearchFilters = new EntitySet<SearchFilter>(new Action<SearchFilter>(this.attach_SearchFilters), new Action<SearchFilter>(this.detach_SearchFilters));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmpID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long EmpID
		{
			get
			{
				return this._EmpID;
			}
			set
			{
				if ((this._EmpID != value))
				{
					this.OnEmpIDChanging(value);
					this.SendPropertyChanging();
					this._EmpID = value;
					this.SendPropertyChanged("EmpID");
					this.OnEmpIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_AssignedIssue", Storage="_AssignedIssues", ThisKey="EmpID", OtherKey="EmpID")]
		public EntitySet<AssignedIssue> AssignedIssues
		{
			get
			{
				return this._AssignedIssues;
			}
			set
			{
				this._AssignedIssues.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_EmpAttValue", Storage="_EmpAttValues", ThisKey="EmpID", OtherKey="EmpID")]
		public EntitySet<EmpAttValue> EmpAttValues
		{
			get
			{
				return this._EmpAttValues;
			}
			set
			{
				this._EmpAttValues.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_FavoriteProject", Storage="_FavoriteProjects", ThisKey="EmpID", OtherKey="EmpID")]
		public EntitySet<FavoriteProject> FavoriteProjects
		{
			get
			{
				return this._FavoriteProjects;
			}
			set
			{
				this._FavoriteProjects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_MeetingDetail", Storage="_MeetingDetails", ThisKey="EmpID", OtherKey="EmpID")]
		public EntitySet<MeetingDetail> MeetingDetails
		{
			get
			{
				return this._MeetingDetails;
			}
			set
			{
				this._MeetingDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_PersonalNote", Storage="_PersonalNotes", ThisKey="EmpID", OtherKey="EmpID")]
		public EntitySet<PersonalNote> PersonalNotes
		{
			get
			{
				return this._PersonalNotes;
			}
			set
			{
				this._PersonalNotes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_SearchFilter", Storage="_SearchFilters", ThisKey="EmpID", OtherKey="EmpID")]
		public EntitySet<SearchFilter> SearchFilters
		{
			get
			{
				return this._SearchFilters;
			}
			set
			{
				this._SearchFilters.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AssignedIssues(AssignedIssue entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_AssignedIssues(AssignedIssue entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_EmpAttValues(EmpAttValue entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_EmpAttValues(EmpAttValue entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_FavoriteProjects(FavoriteProject entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_FavoriteProjects(FavoriteProject entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_MeetingDetails(MeetingDetail entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_MeetingDetails(MeetingDetail entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_PersonalNotes(PersonalNote entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_PersonalNotes(PersonalNote entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_SearchFilters(SearchFilter entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_SearchFilters(SearchFilter entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FavoriteProjects")]
	public partial class FavoriteProject : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _EmpID;
		
		private long _ProjID;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<Project> _Project;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmpIDChanging(long value);
    partial void OnEmpIDChanged();
    partial void OnProjIDChanging(long value);
    partial void OnProjIDChanged();
    #endregion
		
		public FavoriteProject()
		{
			this._Employee = default(EntityRef<Employee>);
			this._Project = default(EntityRef<Project>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmpID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long EmpID
		{
			get
			{
				return this._EmpID;
			}
			set
			{
				if ((this._EmpID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmpIDChanging(value);
					this.SendPropertyChanging();
					this._EmpID = value;
					this.SendPropertyChanged("EmpID");
					this.OnEmpIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long ProjID
		{
			get
			{
				return this._ProjID;
			}
			set
			{
				if ((this._ProjID != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjIDChanging(value);
					this.SendPropertyChanging();
					this._ProjID = value;
					this.SendPropertyChanged("ProjID");
					this.OnProjIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_FavoriteProject", Storage="_Employee", ThisKey="EmpID", OtherKey="EmpID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.FavoriteProjects.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.FavoriteProjects.Add(this);
						this._EmpID = value.EmpID;
					}
					else
					{
						this._EmpID = default(long);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_FavoriteProject", Storage="_Project", ThisKey="ProjID", OtherKey="ProjID", IsForeignKey=true)]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.FavoriteProjects.Remove(this);
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.FavoriteProjects.Add(this);
						this._ProjID = value.ProjID;
					}
					else
					{
						this._ProjID = default(long);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FieldTypes")]
	public partial class FieldType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FieldID;
		
		private string _FieldName;
		
		private EntitySet<CompAttribute> _CompAttributes;
		
		private EntitySet<EmpAttribute> _EmpAttributes;
		
		private EntitySet<IssueAttribute> _IssueAttributes;
		
		private EntitySet<OrgAttribute> _OrgAttributes;
		
		private EntitySet<ProjAttribute> _ProjAttributes;
		
		private EntitySet<SprintAttribute> _SprintAttributes;
		
		private EntitySet<SubCompAttribute> _SubCompAttributes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFieldIDChanging(int value);
    partial void OnFieldIDChanged();
    partial void OnFieldNameChanging(string value);
    partial void OnFieldNameChanged();
    #endregion
		
		public FieldType()
		{
			this._CompAttributes = new EntitySet<CompAttribute>(new Action<CompAttribute>(this.attach_CompAttributes), new Action<CompAttribute>(this.detach_CompAttributes));
			this._EmpAttributes = new EntitySet<EmpAttribute>(new Action<EmpAttribute>(this.attach_EmpAttributes), new Action<EmpAttribute>(this.detach_EmpAttributes));
			this._IssueAttributes = new EntitySet<IssueAttribute>(new Action<IssueAttribute>(this.attach_IssueAttributes), new Action<IssueAttribute>(this.detach_IssueAttributes));
			this._OrgAttributes = new EntitySet<OrgAttribute>(new Action<OrgAttribute>(this.attach_OrgAttributes), new Action<OrgAttribute>(this.detach_OrgAttributes));
			this._ProjAttributes = new EntitySet<ProjAttribute>(new Action<ProjAttribute>(this.attach_ProjAttributes), new Action<ProjAttribute>(this.detach_ProjAttributes));
			this._SprintAttributes = new EntitySet<SprintAttribute>(new Action<SprintAttribute>(this.attach_SprintAttributes), new Action<SprintAttribute>(this.detach_SprintAttributes));
			this._SubCompAttributes = new EntitySet<SubCompAttribute>(new Action<SubCompAttribute>(this.attach_SubCompAttributes), new Action<SubCompAttribute>(this.detach_SubCompAttributes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FieldID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FieldID
		{
			get
			{
				return this._FieldID;
			}
			set
			{
				if ((this._FieldID != value))
				{
					this.OnFieldIDChanging(value);
					this.SendPropertyChanging();
					this._FieldID = value;
					this.SendPropertyChanged("FieldID");
					this.OnFieldIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FieldName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string FieldName
		{
			get
			{
				return this._FieldName;
			}
			set
			{
				if ((this._FieldName != value))
				{
					this.OnFieldNameChanging(value);
					this.SendPropertyChanging();
					this._FieldName = value;
					this.SendPropertyChanged("FieldName");
					this.OnFieldNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FieldType_CompAttribute", Storage="_CompAttributes", ThisKey="FieldID", OtherKey="FieldType")]
		public EntitySet<CompAttribute> CompAttributes
		{
			get
			{
				return this._CompAttributes;
			}
			set
			{
				this._CompAttributes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FieldType_EmpAttribute", Storage="_EmpAttributes", ThisKey="FieldID", OtherKey="FieldType")]
		public EntitySet<EmpAttribute> EmpAttributes
		{
			get
			{
				return this._EmpAttributes;
			}
			set
			{
				this._EmpAttributes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FieldType_IssueAttribute", Storage="_IssueAttributes", ThisKey="FieldID", OtherKey="FieldType")]
		public EntitySet<IssueAttribute> IssueAttributes
		{
			get
			{
				return this._IssueAttributes;
			}
			set
			{
				this._IssueAttributes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FieldType_OrgAttribute", Storage="_OrgAttributes", ThisKey="FieldID", OtherKey="FieldType")]
		public EntitySet<OrgAttribute> OrgAttributes
		{
			get
			{
				return this._OrgAttributes;
			}
			set
			{
				this._OrgAttributes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FieldType_ProjAttribute", Storage="_ProjAttributes", ThisKey="FieldID", OtherKey="FieldType")]
		public EntitySet<ProjAttribute> ProjAttributes
		{
			get
			{
				return this._ProjAttributes;
			}
			set
			{
				this._ProjAttributes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FieldType_SprintAttribute", Storage="_SprintAttributes", ThisKey="FieldID", OtherKey="FieldType")]
		public EntitySet<SprintAttribute> SprintAttributes
		{
			get
			{
				return this._SprintAttributes;
			}
			set
			{
				this._SprintAttributes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FieldType_SubCompAttribute", Storage="_SubCompAttributes", ThisKey="FieldID", OtherKey="FieldType")]
		public EntitySet<SubCompAttribute> SubCompAttributes
		{
			get
			{
				return this._SubCompAttributes;
			}
			set
			{
				this._SubCompAttributes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CompAttributes(CompAttribute entity)
		{
			this.SendPropertyChanging();
			entity.FieldType1 = this;
		}
		
		private void detach_CompAttributes(CompAttribute entity)
		{
			this.SendPropertyChanging();
			entity.FieldType1 = null;
		}
		
		private void attach_EmpAttributes(EmpAttribute entity)
		{
			this.SendPropertyChanging();
			entity.FieldType1 = this;
		}
		
		private void detach_EmpAttributes(EmpAttribute entity)
		{
			this.SendPropertyChanging();
			entity.FieldType1 = null;
		}
		
		private void attach_IssueAttributes(IssueAttribute entity)
		{
			this.SendPropertyChanging();
			entity.FieldType1 = this;
		}
		
		private void detach_IssueAttributes(IssueAttribute entity)
		{
			this.SendPropertyChanging();
			entity.FieldType1 = null;
		}
		
		private void attach_OrgAttributes(OrgAttribute entity)
		{
			this.SendPropertyChanging();
			entity.FieldType1 = this;
		}
		
		private void detach_OrgAttributes(OrgAttribute entity)
		{
			this.SendPropertyChanging();
			entity.FieldType1 = null;
		}
		
		private void attach_ProjAttributes(ProjAttribute entity)
		{
			this.SendPropertyChanging();
			entity.FieldType1 = this;
		}
		
		private void detach_ProjAttributes(ProjAttribute entity)
		{
			this.SendPropertyChanging();
			entity.FieldType1 = null;
		}
		
		private void attach_SprintAttributes(SprintAttribute entity)
		{
			this.SendPropertyChanging();
			entity.FieldType1 = this;
		}
		
		private void detach_SprintAttributes(SprintAttribute entity)
		{
			this.SendPropertyChanging();
			entity.FieldType1 = null;
		}
		
		private void attach_SubCompAttributes(SubCompAttribute entity)
		{
			this.SendPropertyChanging();
			entity.FieldType1 = this;
		}
		
		private void detach_SubCompAttributes(SubCompAttribute entity)
		{
			this.SendPropertyChanging();
			entity.FieldType1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.IssueAttributes")]
	public partial class IssueAttribute : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IssueAttID;
		
		private string _IssueAttName;
		
		private int _FieldType;
		
		private string _DefaultValue;
		
		private bool _CanNull;
		
		private System.Nullable<int> _RegularExpression;
		
		private bool _IsSystemLevel;
		
		private EntitySet<IssueAttValue> _IssueAttValues;
		
		private EntityRef<FieldType> _FieldType1;
		
		private EntityRef<RegularExpression> _RegularExpression1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIssueAttIDChanging(int value);
    partial void OnIssueAttIDChanged();
    partial void OnIssueAttNameChanging(string value);
    partial void OnIssueAttNameChanged();
    partial void OnFieldTypeChanging(int value);
    partial void OnFieldTypeChanged();
    partial void OnDefaultValueChanging(string value);
    partial void OnDefaultValueChanged();
    partial void OnCanNullChanging(bool value);
    partial void OnCanNullChanged();
    partial void OnRegularExpressionChanging(System.Nullable<int> value);
    partial void OnRegularExpressionChanged();
    partial void OnIsSystemLevelChanging(bool value);
    partial void OnIsSystemLevelChanged();
    #endregion
		
		public IssueAttribute()
		{
			this._IssueAttValues = new EntitySet<IssueAttValue>(new Action<IssueAttValue>(this.attach_IssueAttValues), new Action<IssueAttValue>(this.detach_IssueAttValues));
			this._FieldType1 = default(EntityRef<FieldType>);
			this._RegularExpression1 = default(EntityRef<RegularExpression>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IssueAttID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IssueAttID
		{
			get
			{
				return this._IssueAttID;
			}
			set
			{
				if ((this._IssueAttID != value))
				{
					this.OnIssueAttIDChanging(value);
					this.SendPropertyChanging();
					this._IssueAttID = value;
					this.SendPropertyChanged("IssueAttID");
					this.OnIssueAttIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IssueAttName", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string IssueAttName
		{
			get
			{
				return this._IssueAttName;
			}
			set
			{
				if ((this._IssueAttName != value))
				{
					this.OnIssueAttNameChanging(value);
					this.SendPropertyChanging();
					this._IssueAttName = value;
					this.SendPropertyChanged("IssueAttName");
					this.OnIssueAttNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FieldType", DbType="Int NOT NULL")]
		public int FieldType
		{
			get
			{
				return this._FieldType;
			}
			set
			{
				if ((this._FieldType != value))
				{
					if (this._FieldType1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFieldTypeChanging(value);
					this.SendPropertyChanging();
					this._FieldType = value;
					this.SendPropertyChanged("FieldType");
					this.OnFieldTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DefaultValue", DbType="VarChar(MAX)")]
		public string DefaultValue
		{
			get
			{
				return this._DefaultValue;
			}
			set
			{
				if ((this._DefaultValue != value))
				{
					this.OnDefaultValueChanging(value);
					this.SendPropertyChanging();
					this._DefaultValue = value;
					this.SendPropertyChanged("DefaultValue");
					this.OnDefaultValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CanNull", DbType="Bit NOT NULL")]
		public bool CanNull
		{
			get
			{
				return this._CanNull;
			}
			set
			{
				if ((this._CanNull != value))
				{
					this.OnCanNullChanging(value);
					this.SendPropertyChanging();
					this._CanNull = value;
					this.SendPropertyChanged("CanNull");
					this.OnCanNullChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegularExpression", DbType="Int")]
		public System.Nullable<int> RegularExpression
		{
			get
			{
				return this._RegularExpression;
			}
			set
			{
				if ((this._RegularExpression != value))
				{
					if (this._RegularExpression1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRegularExpressionChanging(value);
					this.SendPropertyChanging();
					this._RegularExpression = value;
					this.SendPropertyChanged("RegularExpression");
					this.OnRegularExpressionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsSystemLevel", DbType="Bit NOT NULL")]
		public bool IsSystemLevel
		{
			get
			{
				return this._IsSystemLevel;
			}
			set
			{
				if ((this._IsSystemLevel != value))
				{
					this.OnIsSystemLevelChanging(value);
					this.SendPropertyChanging();
					this._IsSystemLevel = value;
					this.SendPropertyChanged("IsSystemLevel");
					this.OnIsSystemLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="IssueAttribute_IssueAttValue", Storage="_IssueAttValues", ThisKey="IssueAttID", OtherKey="IssueAttID")]
		public EntitySet<IssueAttValue> IssueAttValues
		{
			get
			{
				return this._IssueAttValues;
			}
			set
			{
				this._IssueAttValues.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FieldType_IssueAttribute", Storage="_FieldType1", ThisKey="FieldType", OtherKey="FieldID", IsForeignKey=true)]
		public FieldType FieldType1
		{
			get
			{
				return this._FieldType1.Entity;
			}
			set
			{
				FieldType previousValue = this._FieldType1.Entity;
				if (((previousValue != value) 
							|| (this._FieldType1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FieldType1.Entity = null;
						previousValue.IssueAttributes.Remove(this);
					}
					this._FieldType1.Entity = value;
					if ((value != null))
					{
						value.IssueAttributes.Add(this);
						this._FieldType = value.FieldID;
					}
					else
					{
						this._FieldType = default(int);
					}
					this.SendPropertyChanged("FieldType1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RegularExpression_IssueAttribute", Storage="_RegularExpression1", ThisKey="RegularExpression", OtherKey="ExpressionID", IsForeignKey=true)]
		public RegularExpression RegularExpression1
		{
			get
			{
				return this._RegularExpression1.Entity;
			}
			set
			{
				RegularExpression previousValue = this._RegularExpression1.Entity;
				if (((previousValue != value) 
							|| (this._RegularExpression1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RegularExpression1.Entity = null;
						previousValue.IssueAttributes.Remove(this);
					}
					this._RegularExpression1.Entity = value;
					if ((value != null))
					{
						value.IssueAttributes.Add(this);
						this._RegularExpression = value.ExpressionID;
					}
					else
					{
						this._RegularExpression = default(Nullable<int>);
					}
					this.SendPropertyChanged("RegularExpression1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_IssueAttValues(IssueAttValue entity)
		{
			this.SendPropertyChanging();
			entity.IssueAttribute = this;
		}
		
		private void detach_IssueAttValues(IssueAttValue entity)
		{
			this.SendPropertyChanging();
			entity.IssueAttribute = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.IssueAttValues")]
	public partial class IssueAttValue : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _IssueID;
		
		private int _IssueAttID;
		
		private string _Value;
		
		private EntityRef<IssueAttribute> _IssueAttribute;
		
		private EntityRef<Issue> _Issue;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIssueIDChanging(long value);
    partial void OnIssueIDChanged();
    partial void OnIssueAttIDChanging(int value);
    partial void OnIssueAttIDChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    #endregion
		
		public IssueAttValue()
		{
			this._IssueAttribute = default(EntityRef<IssueAttribute>);
			this._Issue = default(EntityRef<Issue>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IssueID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long IssueID
		{
			get
			{
				return this._IssueID;
			}
			set
			{
				if ((this._IssueID != value))
				{
					if (this._Issue.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIssueIDChanging(value);
					this.SendPropertyChanging();
					this._IssueID = value;
					this.SendPropertyChanged("IssueID");
					this.OnIssueIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IssueAttID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IssueAttID
		{
			get
			{
				return this._IssueAttID;
			}
			set
			{
				if ((this._IssueAttID != value))
				{
					if (this._IssueAttribute.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIssueAttIDChanging(value);
					this.SendPropertyChanging();
					this._IssueAttID = value;
					this.SendPropertyChanged("IssueAttID");
					this.OnIssueAttIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="VarChar(MAX)")]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="IssueAttribute_IssueAttValue", Storage="_IssueAttribute", ThisKey="IssueAttID", OtherKey="IssueAttID", IsForeignKey=true)]
		public IssueAttribute IssueAttribute
		{
			get
			{
				return this._IssueAttribute.Entity;
			}
			set
			{
				IssueAttribute previousValue = this._IssueAttribute.Entity;
				if (((previousValue != value) 
							|| (this._IssueAttribute.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._IssueAttribute.Entity = null;
						previousValue.IssueAttValues.Remove(this);
					}
					this._IssueAttribute.Entity = value;
					if ((value != null))
					{
						value.IssueAttValues.Add(this);
						this._IssueAttID = value.IssueAttID;
					}
					else
					{
						this._IssueAttID = default(int);
					}
					this.SendPropertyChanged("IssueAttribute");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Issue_IssueAttValue", Storage="_Issue", ThisKey="IssueID", OtherKey="IssueID", IsForeignKey=true)]
		public Issue Issue
		{
			get
			{
				return this._Issue.Entity;
			}
			set
			{
				Issue previousValue = this._Issue.Entity;
				if (((previousValue != value) 
							|| (this._Issue.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Issue.Entity = null;
						previousValue.IssueAttValues.Remove(this);
					}
					this._Issue.Entity = value;
					if ((value != null))
					{
						value.IssueAttValues.Add(this);
						this._IssueID = value.IssueID;
					}
					else
					{
						this._IssueID = default(long);
					}
					this.SendPropertyChanged("Issue");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.IssuePriorities")]
	public partial class IssuePriority : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PriorityID;
		
		private string _PriorityName;
		
		private EntitySet<Issue> _Issues;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPriorityIDChanging(int value);
    partial void OnPriorityIDChanged();
    partial void OnPriorityNameChanging(string value);
    partial void OnPriorityNameChanged();
    #endregion
		
		public IssuePriority()
		{
			this._Issues = new EntitySet<Issue>(new Action<Issue>(this.attach_Issues), new Action<Issue>(this.detach_Issues));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PriorityID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PriorityID
		{
			get
			{
				return this._PriorityID;
			}
			set
			{
				if ((this._PriorityID != value))
				{
					this.OnPriorityIDChanging(value);
					this.SendPropertyChanging();
					this._PriorityID = value;
					this.SendPropertyChanged("PriorityID");
					this.OnPriorityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PriorityName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string PriorityName
		{
			get
			{
				return this._PriorityName;
			}
			set
			{
				if ((this._PriorityName != value))
				{
					this.OnPriorityNameChanging(value);
					this.SendPropertyChanging();
					this._PriorityName = value;
					this.SendPropertyChanged("PriorityName");
					this.OnPriorityNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="IssuePriority_Issue", Storage="_Issues", ThisKey="PriorityID", OtherKey="PriorityID")]
		public EntitySet<Issue> Issues
		{
			get
			{
				return this._Issues;
			}
			set
			{
				this._Issues.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Issues(Issue entity)
		{
			this.SendPropertyChanging();
			entity.IssuePriority = this;
		}
		
		private void detach_Issues(Issue entity)
		{
			this.SendPropertyChanging();
			entity.IssuePriority = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Issues")]
	public partial class Issue : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _IssueID;
		
		private int _StateID;
		
		private int _PriorityID;
		
		private int _TypeID;
		
		private EntitySet<AssignedIssue> _AssignedIssues;
		
		private EntitySet<IssueAttValue> _IssueAttValues;
		
		private EntitySet<IssuesDependency> _IssuesDependencies;
		
		private EntitySet<IssuesDependency> _IssuesDependencies1;
		
		private EntitySet<ProjectsBacklog> _ProjectsBacklogs;
		
		private EntitySet<SprintsBacklog> _SprintsBacklogs;
		
		private EntityRef<IssuePriority> _IssuePriority;
		
		private EntityRef<IssueType> _IssueType;
		
		private EntityRef<IssueWorkFlow> _IssueWorkFlow;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIssueIDChanging(long value);
    partial void OnIssueIDChanged();
    partial void OnStateIDChanging(int value);
    partial void OnStateIDChanged();
    partial void OnPriorityIDChanging(int value);
    partial void OnPriorityIDChanged();
    partial void OnTypeIDChanging(int value);
    partial void OnTypeIDChanged();
    #endregion
		
		public Issue()
		{
			this._AssignedIssues = new EntitySet<AssignedIssue>(new Action<AssignedIssue>(this.attach_AssignedIssues), new Action<AssignedIssue>(this.detach_AssignedIssues));
			this._IssueAttValues = new EntitySet<IssueAttValue>(new Action<IssueAttValue>(this.attach_IssueAttValues), new Action<IssueAttValue>(this.detach_IssueAttValues));
			this._IssuesDependencies = new EntitySet<IssuesDependency>(new Action<IssuesDependency>(this.attach_IssuesDependencies), new Action<IssuesDependency>(this.detach_IssuesDependencies));
			this._IssuesDependencies1 = new EntitySet<IssuesDependency>(new Action<IssuesDependency>(this.attach_IssuesDependencies1), new Action<IssuesDependency>(this.detach_IssuesDependencies1));
			this._ProjectsBacklogs = new EntitySet<ProjectsBacklog>(new Action<ProjectsBacklog>(this.attach_ProjectsBacklogs), new Action<ProjectsBacklog>(this.detach_ProjectsBacklogs));
			this._SprintsBacklogs = new EntitySet<SprintsBacklog>(new Action<SprintsBacklog>(this.attach_SprintsBacklogs), new Action<SprintsBacklog>(this.detach_SprintsBacklogs));
			this._IssuePriority = default(EntityRef<IssuePriority>);
			this._IssueType = default(EntityRef<IssueType>);
			this._IssueWorkFlow = default(EntityRef<IssueWorkFlow>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IssueID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long IssueID
		{
			get
			{
				return this._IssueID;
			}
			set
			{
				if ((this._IssueID != value))
				{
					this.OnIssueIDChanging(value);
					this.SendPropertyChanging();
					this._IssueID = value;
					this.SendPropertyChanged("IssueID");
					this.OnIssueIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StateID", DbType="Int NOT NULL")]
		public int StateID
		{
			get
			{
				return this._StateID;
			}
			set
			{
				if ((this._StateID != value))
				{
					if (this._IssueWorkFlow.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStateIDChanging(value);
					this.SendPropertyChanging();
					this._StateID = value;
					this.SendPropertyChanged("StateID");
					this.OnStateIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PriorityID", DbType="Int NOT NULL")]
		public int PriorityID
		{
			get
			{
				return this._PriorityID;
			}
			set
			{
				if ((this._PriorityID != value))
				{
					if (this._IssuePriority.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPriorityIDChanging(value);
					this.SendPropertyChanging();
					this._PriorityID = value;
					this.SendPropertyChanged("PriorityID");
					this.OnPriorityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeID", DbType="Int NOT NULL")]
		public int TypeID
		{
			get
			{
				return this._TypeID;
			}
			set
			{
				if ((this._TypeID != value))
				{
					if (this._IssueType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTypeIDChanging(value);
					this.SendPropertyChanging();
					this._TypeID = value;
					this.SendPropertyChanged("TypeID");
					this.OnTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Issue_AssignedIssue", Storage="_AssignedIssues", ThisKey="IssueID", OtherKey="IssueID")]
		public EntitySet<AssignedIssue> AssignedIssues
		{
			get
			{
				return this._AssignedIssues;
			}
			set
			{
				this._AssignedIssues.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Issue_IssueAttValue", Storage="_IssueAttValues", ThisKey="IssueID", OtherKey="IssueID")]
		public EntitySet<IssueAttValue> IssueAttValues
		{
			get
			{
				return this._IssueAttValues;
			}
			set
			{
				this._IssueAttValues.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Issue_IssuesDependency", Storage="_IssuesDependencies", ThisKey="IssueID", OtherKey="IssueID")]
		public EntitySet<IssuesDependency> IssuesDependencies
		{
			get
			{
				return this._IssuesDependencies;
			}
			set
			{
				this._IssuesDependencies.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Issue_IssuesDependency1", Storage="_IssuesDependencies1", ThisKey="IssueID", OtherKey="DependsOn")]
		public EntitySet<IssuesDependency> IssuesDependencies1
		{
			get
			{
				return this._IssuesDependencies1;
			}
			set
			{
				this._IssuesDependencies1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Issue_ProjectsBacklog", Storage="_ProjectsBacklogs", ThisKey="IssueID", OtherKey="IssueID")]
		public EntitySet<ProjectsBacklog> ProjectsBacklogs
		{
			get
			{
				return this._ProjectsBacklogs;
			}
			set
			{
				this._ProjectsBacklogs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Issue_SprintsBacklog", Storage="_SprintsBacklogs", ThisKey="IssueID", OtherKey="IssueID")]
		public EntitySet<SprintsBacklog> SprintsBacklogs
		{
			get
			{
				return this._SprintsBacklogs;
			}
			set
			{
				this._SprintsBacklogs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="IssuePriority_Issue", Storage="_IssuePriority", ThisKey="PriorityID", OtherKey="PriorityID", IsForeignKey=true)]
		public IssuePriority IssuePriority
		{
			get
			{
				return this._IssuePriority.Entity;
			}
			set
			{
				IssuePriority previousValue = this._IssuePriority.Entity;
				if (((previousValue != value) 
							|| (this._IssuePriority.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._IssuePriority.Entity = null;
						previousValue.Issues.Remove(this);
					}
					this._IssuePriority.Entity = value;
					if ((value != null))
					{
						value.Issues.Add(this);
						this._PriorityID = value.PriorityID;
					}
					else
					{
						this._PriorityID = default(int);
					}
					this.SendPropertyChanged("IssuePriority");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="IssueType_Issue", Storage="_IssueType", ThisKey="TypeID", OtherKey="TypeID", IsForeignKey=true)]
		public IssueType IssueType
		{
			get
			{
				return this._IssueType.Entity;
			}
			set
			{
				IssueType previousValue = this._IssueType.Entity;
				if (((previousValue != value) 
							|| (this._IssueType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._IssueType.Entity = null;
						previousValue.Issues.Remove(this);
					}
					this._IssueType.Entity = value;
					if ((value != null))
					{
						value.Issues.Add(this);
						this._TypeID = value.TypeID;
					}
					else
					{
						this._TypeID = default(int);
					}
					this.SendPropertyChanged("IssueType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="IssueWorkFlow_Issue", Storage="_IssueWorkFlow", ThisKey="StateID", OtherKey="StateID", IsForeignKey=true)]
		public IssueWorkFlow IssueWorkFlow
		{
			get
			{
				return this._IssueWorkFlow.Entity;
			}
			set
			{
				IssueWorkFlow previousValue = this._IssueWorkFlow.Entity;
				if (((previousValue != value) 
							|| (this._IssueWorkFlow.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._IssueWorkFlow.Entity = null;
						previousValue.Issues.Remove(this);
					}
					this._IssueWorkFlow.Entity = value;
					if ((value != null))
					{
						value.Issues.Add(this);
						this._StateID = value.StateID;
					}
					else
					{
						this._StateID = default(int);
					}
					this.SendPropertyChanged("IssueWorkFlow");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AssignedIssues(AssignedIssue entity)
		{
			this.SendPropertyChanging();
			entity.Issue = this;
		}
		
		private void detach_AssignedIssues(AssignedIssue entity)
		{
			this.SendPropertyChanging();
			entity.Issue = null;
		}
		
		private void attach_IssueAttValues(IssueAttValue entity)
		{
			this.SendPropertyChanging();
			entity.Issue = this;
		}
		
		private void detach_IssueAttValues(IssueAttValue entity)
		{
			this.SendPropertyChanging();
			entity.Issue = null;
		}
		
		private void attach_IssuesDependencies(IssuesDependency entity)
		{
			this.SendPropertyChanging();
			entity.Issue = this;
		}
		
		private void detach_IssuesDependencies(IssuesDependency entity)
		{
			this.SendPropertyChanging();
			entity.Issue = null;
		}
		
		private void attach_IssuesDependencies1(IssuesDependency entity)
		{
			this.SendPropertyChanging();
			entity.Issue1 = this;
		}
		
		private void detach_IssuesDependencies1(IssuesDependency entity)
		{
			this.SendPropertyChanging();
			entity.Issue1 = null;
		}
		
		private void attach_ProjectsBacklogs(ProjectsBacklog entity)
		{
			this.SendPropertyChanging();
			entity.Issue = this;
		}
		
		private void detach_ProjectsBacklogs(ProjectsBacklog entity)
		{
			this.SendPropertyChanging();
			entity.Issue = null;
		}
		
		private void attach_SprintsBacklogs(SprintsBacklog entity)
		{
			this.SendPropertyChanging();
			entity.Issue = this;
		}
		
		private void detach_SprintsBacklogs(SprintsBacklog entity)
		{
			this.SendPropertyChanging();
			entity.Issue = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.IssuesDependency")]
	public partial class IssuesDependency : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _IssueID;
		
		private long _DependsOn;
		
		private EntityRef<Issue> _Issue;
		
		private EntityRef<Issue> _Issue1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIssueIDChanging(long value);
    partial void OnIssueIDChanged();
    partial void OnDependsOnChanging(long value);
    partial void OnDependsOnChanged();
    #endregion
		
		public IssuesDependency()
		{
			this._Issue = default(EntityRef<Issue>);
			this._Issue1 = default(EntityRef<Issue>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IssueID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long IssueID
		{
			get
			{
				return this._IssueID;
			}
			set
			{
				if ((this._IssueID != value))
				{
					if (this._Issue.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIssueIDChanging(value);
					this.SendPropertyChanging();
					this._IssueID = value;
					this.SendPropertyChanged("IssueID");
					this.OnIssueIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DependsOn", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long DependsOn
		{
			get
			{
				return this._DependsOn;
			}
			set
			{
				if ((this._DependsOn != value))
				{
					if (this._Issue1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDependsOnChanging(value);
					this.SendPropertyChanging();
					this._DependsOn = value;
					this.SendPropertyChanged("DependsOn");
					this.OnDependsOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Issue_IssuesDependency", Storage="_Issue", ThisKey="IssueID", OtherKey="IssueID", IsForeignKey=true)]
		public Issue Issue
		{
			get
			{
				return this._Issue.Entity;
			}
			set
			{
				Issue previousValue = this._Issue.Entity;
				if (((previousValue != value) 
							|| (this._Issue.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Issue.Entity = null;
						previousValue.IssuesDependencies.Remove(this);
					}
					this._Issue.Entity = value;
					if ((value != null))
					{
						value.IssuesDependencies.Add(this);
						this._IssueID = value.IssueID;
					}
					else
					{
						this._IssueID = default(long);
					}
					this.SendPropertyChanged("Issue");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Issue_IssuesDependency1", Storage="_Issue1", ThisKey="DependsOn", OtherKey="IssueID", IsForeignKey=true)]
		public Issue Issue1
		{
			get
			{
				return this._Issue1.Entity;
			}
			set
			{
				Issue previousValue = this._Issue1.Entity;
				if (((previousValue != value) 
							|| (this._Issue1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Issue1.Entity = null;
						previousValue.IssuesDependencies1.Remove(this);
					}
					this._Issue1.Entity = value;
					if ((value != null))
					{
						value.IssuesDependencies1.Add(this);
						this._DependsOn = value.IssueID;
					}
					else
					{
						this._DependsOn = default(long);
					}
					this.SendPropertyChanged("Issue1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.IssueTypes")]
	public partial class IssueType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TypeID;
		
		private string _TypeName;
		
		private EntitySet<Issue> _Issues;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTypeIDChanging(int value);
    partial void OnTypeIDChanged();
    partial void OnTypeNameChanging(string value);
    partial void OnTypeNameChanged();
    #endregion
		
		public IssueType()
		{
			this._Issues = new EntitySet<Issue>(new Action<Issue>(this.attach_Issues), new Action<Issue>(this.detach_Issues));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TypeID
		{
			get
			{
				return this._TypeID;
			}
			set
			{
				if ((this._TypeID != value))
				{
					this.OnTypeIDChanging(value);
					this.SendPropertyChanging();
					this._TypeID = value;
					this.SendPropertyChanged("TypeID");
					this.OnTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeName", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string TypeName
		{
			get
			{
				return this._TypeName;
			}
			set
			{
				if ((this._TypeName != value))
				{
					this.OnTypeNameChanging(value);
					this.SendPropertyChanging();
					this._TypeName = value;
					this.SendPropertyChanged("TypeName");
					this.OnTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="IssueType_Issue", Storage="_Issues", ThisKey="TypeID", OtherKey="TypeID")]
		public EntitySet<Issue> Issues
		{
			get
			{
				return this._Issues;
			}
			set
			{
				this._Issues.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Issues(Issue entity)
		{
			this.SendPropertyChanging();
			entity.IssueType = this;
		}
		
		private void detach_Issues(Issue entity)
		{
			this.SendPropertyChanging();
			entity.IssueType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.IssueWorkFlow")]
	public partial class IssueWorkFlow : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StateID;
		
		private string _StateName;
		
		private int _StateRank;
		
		private bool _Active;
		
		private EntitySet<Issue> _Issues;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStateIDChanging(int value);
    partial void OnStateIDChanged();
    partial void OnStateNameChanging(string value);
    partial void OnStateNameChanged();
    partial void OnStateRankChanging(int value);
    partial void OnStateRankChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    #endregion
		
		public IssueWorkFlow()
		{
			this._Issues = new EntitySet<Issue>(new Action<Issue>(this.attach_Issues), new Action<Issue>(this.detach_Issues));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StateID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StateID
		{
			get
			{
				return this._StateID;
			}
			set
			{
				if ((this._StateID != value))
				{
					this.OnStateIDChanging(value);
					this.SendPropertyChanging();
					this._StateID = value;
					this.SendPropertyChanged("StateID");
					this.OnStateIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StateName", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string StateName
		{
			get
			{
				return this._StateName;
			}
			set
			{
				if ((this._StateName != value))
				{
					this.OnStateNameChanging(value);
					this.SendPropertyChanging();
					this._StateName = value;
					this.SendPropertyChanged("StateName");
					this.OnStateNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StateRank", DbType="Int NOT NULL")]
		public int StateRank
		{
			get
			{
				return this._StateRank;
			}
			set
			{
				if ((this._StateRank != value))
				{
					this.OnStateRankChanging(value);
					this.SendPropertyChanging();
					this._StateRank = value;
					this.SendPropertyChanged("StateRank");
					this.OnStateRankChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="IssueWorkFlow_Issue", Storage="_Issues", ThisKey="StateID", OtherKey="StateID")]
		public EntitySet<Issue> Issues
		{
			get
			{
				return this._Issues;
			}
			set
			{
				this._Issues.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Issues(Issue entity)
		{
			this.SendPropertyChanging();
			entity.IssueWorkFlow = this;
		}
		
		private void detach_Issues(Issue entity)
		{
			this.SendPropertyChanging();
			entity.IssueWorkFlow = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MeetingDetails")]
	public partial class MeetingDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _MeetingID;
		
		private long _EmpID;
		
		private string _Yesterday;
		
		private string _Today;
		
		private string _Tomorrow;
		
		private string _Comments;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<ScrumMeeting> _ScrumMeeting;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMeetingIDChanging(long value);
    partial void OnMeetingIDChanged();
    partial void OnEmpIDChanging(long value);
    partial void OnEmpIDChanged();
    partial void OnYesterdayChanging(string value);
    partial void OnYesterdayChanged();
    partial void OnTodayChanging(string value);
    partial void OnTodayChanged();
    partial void OnTomorrowChanging(string value);
    partial void OnTomorrowChanged();
    partial void OnCommentsChanging(string value);
    partial void OnCommentsChanged();
    #endregion
		
		public MeetingDetail()
		{
			this._Employee = default(EntityRef<Employee>);
			this._ScrumMeeting = default(EntityRef<ScrumMeeting>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MeetingID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long MeetingID
		{
			get
			{
				return this._MeetingID;
			}
			set
			{
				if ((this._MeetingID != value))
				{
					if (this._ScrumMeeting.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMeetingIDChanging(value);
					this.SendPropertyChanging();
					this._MeetingID = value;
					this.SendPropertyChanged("MeetingID");
					this.OnMeetingIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmpID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long EmpID
		{
			get
			{
				return this._EmpID;
			}
			set
			{
				if ((this._EmpID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmpIDChanging(value);
					this.SendPropertyChanging();
					this._EmpID = value;
					this.SendPropertyChanged("EmpID");
					this.OnEmpIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Yesterday", DbType="VarChar(MAX)")]
		public string Yesterday
		{
			get
			{
				return this._Yesterday;
			}
			set
			{
				if ((this._Yesterday != value))
				{
					this.OnYesterdayChanging(value);
					this.SendPropertyChanging();
					this._Yesterday = value;
					this.SendPropertyChanged("Yesterday");
					this.OnYesterdayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Today", DbType="VarChar(MAX)")]
		public string Today
		{
			get
			{
				return this._Today;
			}
			set
			{
				if ((this._Today != value))
				{
					this.OnTodayChanging(value);
					this.SendPropertyChanging();
					this._Today = value;
					this.SendPropertyChanged("Today");
					this.OnTodayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tomorrow", DbType="VarChar(MAX)")]
		public string Tomorrow
		{
			get
			{
				return this._Tomorrow;
			}
			set
			{
				if ((this._Tomorrow != value))
				{
					this.OnTomorrowChanging(value);
					this.SendPropertyChanging();
					this._Tomorrow = value;
					this.SendPropertyChanged("Tomorrow");
					this.OnTomorrowChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comments", DbType="VarChar(MAX)")]
		public string Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				if ((this._Comments != value))
				{
					this.OnCommentsChanging(value);
					this.SendPropertyChanging();
					this._Comments = value;
					this.SendPropertyChanged("Comments");
					this.OnCommentsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_MeetingDetail", Storage="_Employee", ThisKey="EmpID", OtherKey="EmpID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.MeetingDetails.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.MeetingDetails.Add(this);
						this._EmpID = value.EmpID;
					}
					else
					{
						this._EmpID = default(long);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ScrumMeeting_MeetingDetail", Storage="_ScrumMeeting", ThisKey="MeetingID", OtherKey="MeetingID", IsForeignKey=true)]
		public ScrumMeeting ScrumMeeting
		{
			get
			{
				return this._ScrumMeeting.Entity;
			}
			set
			{
				ScrumMeeting previousValue = this._ScrumMeeting.Entity;
				if (((previousValue != value) 
							|| (this._ScrumMeeting.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ScrumMeeting.Entity = null;
						previousValue.MeetingDetails.Remove(this);
					}
					this._ScrumMeeting.Entity = value;
					if ((value != null))
					{
						value.MeetingDetails.Add(this);
						this._MeetingID = value.MeetingID;
					}
					else
					{
						this._MeetingID = default(long);
					}
					this.SendPropertyChanged("ScrumMeeting");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Organization")]
	public partial class Organization : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OrgID;
		
		private string _Announcement;
		
		private EntitySet<OrgAttValue> _OrgAttValues;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrgIDChanging(int value);
    partial void OnOrgIDChanged();
    partial void OnAnnouncementChanging(string value);
    partial void OnAnnouncementChanged();
    #endregion
		
		public Organization()
		{
			this._OrgAttValues = new EntitySet<OrgAttValue>(new Action<OrgAttValue>(this.attach_OrgAttValues), new Action<OrgAttValue>(this.detach_OrgAttValues));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrgID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int OrgID
		{
			get
			{
				return this._OrgID;
			}
			set
			{
				if ((this._OrgID != value))
				{
					this.OnOrgIDChanging(value);
					this.SendPropertyChanging();
					this._OrgID = value;
					this.SendPropertyChanged("OrgID");
					this.OnOrgIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Announcement", DbType="VarChar(MAX)")]
		public string Announcement
		{
			get
			{
				return this._Announcement;
			}
			set
			{
				if ((this._Announcement != value))
				{
					this.OnAnnouncementChanging(value);
					this.SendPropertyChanging();
					this._Announcement = value;
					this.SendPropertyChanged("Announcement");
					this.OnAnnouncementChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organization_OrgAttValue", Storage="_OrgAttValues", ThisKey="OrgID", OtherKey="OrgID")]
		public EntitySet<OrgAttValue> OrgAttValues
		{
			get
			{
				return this._OrgAttValues;
			}
			set
			{
				this._OrgAttValues.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OrgAttValues(OrgAttValue entity)
		{
			this.SendPropertyChanging();
			entity.Organization = this;
		}
		
		private void detach_OrgAttValues(OrgAttValue entity)
		{
			this.SendPropertyChanging();
			entity.Organization = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OrgAttributes")]
	public partial class OrgAttribute : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OrgAttID;
		
		private string _OrgAttName;
		
		private int _FieldType;
		
		private string _DefaultValue;
		
		private bool _CanNull;
		
		private System.Nullable<int> _RegularExpression;
		
		private EntitySet<OrgAttValue> _OrgAttValues;
		
		private EntityRef<FieldType> _FieldType1;
		
		private EntityRef<RegularExpression> _RegularExpression1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrgAttIDChanging(int value);
    partial void OnOrgAttIDChanged();
    partial void OnOrgAttNameChanging(string value);
    partial void OnOrgAttNameChanged();
    partial void OnFieldTypeChanging(int value);
    partial void OnFieldTypeChanged();
    partial void OnDefaultValueChanging(string value);
    partial void OnDefaultValueChanged();
    partial void OnCanNullChanging(bool value);
    partial void OnCanNullChanged();
    partial void OnRegularExpressionChanging(System.Nullable<int> value);
    partial void OnRegularExpressionChanged();
    #endregion
		
		public OrgAttribute()
		{
			this._OrgAttValues = new EntitySet<OrgAttValue>(new Action<OrgAttValue>(this.attach_OrgAttValues), new Action<OrgAttValue>(this.detach_OrgAttValues));
			this._FieldType1 = default(EntityRef<FieldType>);
			this._RegularExpression1 = default(EntityRef<RegularExpression>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrgAttID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int OrgAttID
		{
			get
			{
				return this._OrgAttID;
			}
			set
			{
				if ((this._OrgAttID != value))
				{
					this.OnOrgAttIDChanging(value);
					this.SendPropertyChanging();
					this._OrgAttID = value;
					this.SendPropertyChanged("OrgAttID");
					this.OnOrgAttIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrgAttName", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string OrgAttName
		{
			get
			{
				return this._OrgAttName;
			}
			set
			{
				if ((this._OrgAttName != value))
				{
					this.OnOrgAttNameChanging(value);
					this.SendPropertyChanging();
					this._OrgAttName = value;
					this.SendPropertyChanged("OrgAttName");
					this.OnOrgAttNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FieldType", DbType="Int NOT NULL")]
		public int FieldType
		{
			get
			{
				return this._FieldType;
			}
			set
			{
				if ((this._FieldType != value))
				{
					if (this._FieldType1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFieldTypeChanging(value);
					this.SendPropertyChanging();
					this._FieldType = value;
					this.SendPropertyChanged("FieldType");
					this.OnFieldTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DefaultValue", DbType="VarChar(MAX)")]
		public string DefaultValue
		{
			get
			{
				return this._DefaultValue;
			}
			set
			{
				if ((this._DefaultValue != value))
				{
					this.OnDefaultValueChanging(value);
					this.SendPropertyChanging();
					this._DefaultValue = value;
					this.SendPropertyChanged("DefaultValue");
					this.OnDefaultValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CanNull", DbType="Bit NOT NULL")]
		public bool CanNull
		{
			get
			{
				return this._CanNull;
			}
			set
			{
				if ((this._CanNull != value))
				{
					this.OnCanNullChanging(value);
					this.SendPropertyChanging();
					this._CanNull = value;
					this.SendPropertyChanged("CanNull");
					this.OnCanNullChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegularExpression", DbType="Int")]
		public System.Nullable<int> RegularExpression
		{
			get
			{
				return this._RegularExpression;
			}
			set
			{
				if ((this._RegularExpression != value))
				{
					if (this._RegularExpression1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRegularExpressionChanging(value);
					this.SendPropertyChanging();
					this._RegularExpression = value;
					this.SendPropertyChanged("RegularExpression");
					this.OnRegularExpressionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrgAttribute_OrgAttValue", Storage="_OrgAttValues", ThisKey="OrgAttID", OtherKey="OrgAttID")]
		public EntitySet<OrgAttValue> OrgAttValues
		{
			get
			{
				return this._OrgAttValues;
			}
			set
			{
				this._OrgAttValues.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FieldType_OrgAttribute", Storage="_FieldType1", ThisKey="FieldType", OtherKey="FieldID", IsForeignKey=true)]
		public FieldType FieldType1
		{
			get
			{
				return this._FieldType1.Entity;
			}
			set
			{
				FieldType previousValue = this._FieldType1.Entity;
				if (((previousValue != value) 
							|| (this._FieldType1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FieldType1.Entity = null;
						previousValue.OrgAttributes.Remove(this);
					}
					this._FieldType1.Entity = value;
					if ((value != null))
					{
						value.OrgAttributes.Add(this);
						this._FieldType = value.FieldID;
					}
					else
					{
						this._FieldType = default(int);
					}
					this.SendPropertyChanged("FieldType1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RegularExpression_OrgAttribute", Storage="_RegularExpression1", ThisKey="RegularExpression", OtherKey="ExpressionID", IsForeignKey=true)]
		public RegularExpression RegularExpression1
		{
			get
			{
				return this._RegularExpression1.Entity;
			}
			set
			{
				RegularExpression previousValue = this._RegularExpression1.Entity;
				if (((previousValue != value) 
							|| (this._RegularExpression1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RegularExpression1.Entity = null;
						previousValue.OrgAttributes.Remove(this);
					}
					this._RegularExpression1.Entity = value;
					if ((value != null))
					{
						value.OrgAttributes.Add(this);
						this._RegularExpression = value.ExpressionID;
					}
					else
					{
						this._RegularExpression = default(Nullable<int>);
					}
					this.SendPropertyChanged("RegularExpression1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OrgAttValues(OrgAttValue entity)
		{
			this.SendPropertyChanging();
			entity.OrgAttribute = this;
		}
		
		private void detach_OrgAttValues(OrgAttValue entity)
		{
			this.SendPropertyChanging();
			entity.OrgAttribute = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OrgAttValues")]
	public partial class OrgAttValue : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OrgID;
		
		private int _OrgAttID;
		
		private string _Value;
		
		private EntityRef<Organization> _Organization;
		
		private EntityRef<OrgAttribute> _OrgAttribute;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrgIDChanging(int value);
    partial void OnOrgIDChanged();
    partial void OnOrgAttIDChanging(int value);
    partial void OnOrgAttIDChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    #endregion
		
		public OrgAttValue()
		{
			this._Organization = default(EntityRef<Organization>);
			this._OrgAttribute = default(EntityRef<OrgAttribute>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrgID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int OrgID
		{
			get
			{
				return this._OrgID;
			}
			set
			{
				if ((this._OrgID != value))
				{
					if (this._Organization.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrgIDChanging(value);
					this.SendPropertyChanging();
					this._OrgID = value;
					this.SendPropertyChanged("OrgID");
					this.OnOrgIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrgAttID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int OrgAttID
		{
			get
			{
				return this._OrgAttID;
			}
			set
			{
				if ((this._OrgAttID != value))
				{
					if (this._OrgAttribute.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrgAttIDChanging(value);
					this.SendPropertyChanging();
					this._OrgAttID = value;
					this.SendPropertyChanged("OrgAttID");
					this.OnOrgAttIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="VarChar(MAX)")]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organization_OrgAttValue", Storage="_Organization", ThisKey="OrgID", OtherKey="OrgID", IsForeignKey=true)]
		public Organization Organization
		{
			get
			{
				return this._Organization.Entity;
			}
			set
			{
				Organization previousValue = this._Organization.Entity;
				if (((previousValue != value) 
							|| (this._Organization.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Organization.Entity = null;
						previousValue.OrgAttValues.Remove(this);
					}
					this._Organization.Entity = value;
					if ((value != null))
					{
						value.OrgAttValues.Add(this);
						this._OrgID = value.OrgID;
					}
					else
					{
						this._OrgID = default(int);
					}
					this.SendPropertyChanged("Organization");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrgAttribute_OrgAttValue", Storage="_OrgAttribute", ThisKey="OrgAttID", OtherKey="OrgAttID", IsForeignKey=true)]
		public OrgAttribute OrgAttribute
		{
			get
			{
				return this._OrgAttribute.Entity;
			}
			set
			{
				OrgAttribute previousValue = this._OrgAttribute.Entity;
				if (((previousValue != value) 
							|| (this._OrgAttribute.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrgAttribute.Entity = null;
						previousValue.OrgAttValues.Remove(this);
					}
					this._OrgAttribute.Entity = value;
					if ((value != null))
					{
						value.OrgAttValues.Add(this);
						this._OrgAttID = value.OrgAttID;
					}
					else
					{
						this._OrgAttID = default(int);
					}
					this.SendPropertyChanged("OrgAttribute");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PersonalNotes")]
	public partial class PersonalNote : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _NoteID;
		
		private long _EmpID;
		
		private string _Subject;
		
		private string _Body;
		
		private System.DateTime _CreationDate;
		
		private EntityRef<Employee> _Employee;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNoteIDChanging(long value);
    partial void OnNoteIDChanged();
    partial void OnEmpIDChanging(long value);
    partial void OnEmpIDChanged();
    partial void OnSubjectChanging(string value);
    partial void OnSubjectChanged();
    partial void OnBodyChanging(string value);
    partial void OnBodyChanged();
    partial void OnCreationDateChanging(System.DateTime value);
    partial void OnCreationDateChanged();
    #endregion
		
		public PersonalNote()
		{
			this._Employee = default(EntityRef<Employee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NoteID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long NoteID
		{
			get
			{
				return this._NoteID;
			}
			set
			{
				if ((this._NoteID != value))
				{
					this.OnNoteIDChanging(value);
					this.SendPropertyChanging();
					this._NoteID = value;
					this.SendPropertyChanged("NoteID");
					this.OnNoteIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmpID", DbType="BigInt NOT NULL")]
		public long EmpID
		{
			get
			{
				return this._EmpID;
			}
			set
			{
				if ((this._EmpID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmpIDChanging(value);
					this.SendPropertyChanging();
					this._EmpID = value;
					this.SendPropertyChanged("EmpID");
					this.OnEmpIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Subject", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Subject
		{
			get
			{
				return this._Subject;
			}
			set
			{
				if ((this._Subject != value))
				{
					this.OnSubjectChanging(value);
					this.SendPropertyChanging();
					this._Subject = value;
					this.SendPropertyChanged("Subject");
					this.OnSubjectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Body", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Body
		{
			get
			{
				return this._Body;
			}
			set
			{
				if ((this._Body != value))
				{
					this.OnBodyChanging(value);
					this.SendPropertyChanging();
					this._Body = value;
					this.SendPropertyChanged("Body");
					this.OnBodyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreationDate", DbType="Date NOT NULL")]
		public System.DateTime CreationDate
		{
			get
			{
				return this._CreationDate;
			}
			set
			{
				if ((this._CreationDate != value))
				{
					this.OnCreationDateChanging(value);
					this.SendPropertyChanging();
					this._CreationDate = value;
					this.SendPropertyChanged("CreationDate");
					this.OnCreationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_PersonalNote", Storage="_Employee", ThisKey="EmpID", OtherKey="EmpID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.PersonalNotes.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.PersonalNotes.Add(this);
						this._EmpID = value.EmpID;
					}
					else
					{
						this._EmpID = default(long);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProjAttributes")]
	public partial class ProjAttribute : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProjAttID;
		
		private string _ProjAttName;
		
		private int _FieldType;
		
		private string _DefaultValue;
		
		private bool _CanNull;
		
		private System.Nullable<int> _RegularExpression;
		
		private bool _IsSystemLevel;
		
		private EntitySet<ProjAttValue> _ProjAttValues;
		
		private EntityRef<FieldType> _FieldType1;
		
		private EntityRef<RegularExpression> _RegularExpression1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProjAttIDChanging(int value);
    partial void OnProjAttIDChanged();
    partial void OnProjAttNameChanging(string value);
    partial void OnProjAttNameChanged();
    partial void OnFieldTypeChanging(int value);
    partial void OnFieldTypeChanged();
    partial void OnDefaultValueChanging(string value);
    partial void OnDefaultValueChanged();
    partial void OnCanNullChanging(bool value);
    partial void OnCanNullChanged();
    partial void OnRegularExpressionChanging(System.Nullable<int> value);
    partial void OnRegularExpressionChanged();
    partial void OnIsSystemLevelChanging(bool value);
    partial void OnIsSystemLevelChanged();
    #endregion
		
		public ProjAttribute()
		{
			this._ProjAttValues = new EntitySet<ProjAttValue>(new Action<ProjAttValue>(this.attach_ProjAttValues), new Action<ProjAttValue>(this.detach_ProjAttValues));
			this._FieldType1 = default(EntityRef<FieldType>);
			this._RegularExpression1 = default(EntityRef<RegularExpression>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjAttID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProjAttID
		{
			get
			{
				return this._ProjAttID;
			}
			set
			{
				if ((this._ProjAttID != value))
				{
					this.OnProjAttIDChanging(value);
					this.SendPropertyChanging();
					this._ProjAttID = value;
					this.SendPropertyChanged("ProjAttID");
					this.OnProjAttIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjAttName", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string ProjAttName
		{
			get
			{
				return this._ProjAttName;
			}
			set
			{
				if ((this._ProjAttName != value))
				{
					this.OnProjAttNameChanging(value);
					this.SendPropertyChanging();
					this._ProjAttName = value;
					this.SendPropertyChanged("ProjAttName");
					this.OnProjAttNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FieldType", DbType="Int NOT NULL")]
		public int FieldType
		{
			get
			{
				return this._FieldType;
			}
			set
			{
				if ((this._FieldType != value))
				{
					if (this._FieldType1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFieldTypeChanging(value);
					this.SendPropertyChanging();
					this._FieldType = value;
					this.SendPropertyChanged("FieldType");
					this.OnFieldTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DefaultValue", DbType="VarChar(MAX)")]
		public string DefaultValue
		{
			get
			{
				return this._DefaultValue;
			}
			set
			{
				if ((this._DefaultValue != value))
				{
					this.OnDefaultValueChanging(value);
					this.SendPropertyChanging();
					this._DefaultValue = value;
					this.SendPropertyChanged("DefaultValue");
					this.OnDefaultValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CanNull", DbType="Bit NOT NULL")]
		public bool CanNull
		{
			get
			{
				return this._CanNull;
			}
			set
			{
				if ((this._CanNull != value))
				{
					this.OnCanNullChanging(value);
					this.SendPropertyChanging();
					this._CanNull = value;
					this.SendPropertyChanged("CanNull");
					this.OnCanNullChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegularExpression", DbType="Int")]
		public System.Nullable<int> RegularExpression
		{
			get
			{
				return this._RegularExpression;
			}
			set
			{
				if ((this._RegularExpression != value))
				{
					if (this._RegularExpression1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRegularExpressionChanging(value);
					this.SendPropertyChanging();
					this._RegularExpression = value;
					this.SendPropertyChanged("RegularExpression");
					this.OnRegularExpressionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsSystemLevel", DbType="Bit NOT NULL")]
		public bool IsSystemLevel
		{
			get
			{
				return this._IsSystemLevel;
			}
			set
			{
				if ((this._IsSystemLevel != value))
				{
					this.OnIsSystemLevelChanging(value);
					this.SendPropertyChanging();
					this._IsSystemLevel = value;
					this.SendPropertyChanged("IsSystemLevel");
					this.OnIsSystemLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProjAttribute_ProjAttValue", Storage="_ProjAttValues", ThisKey="ProjAttID", OtherKey="ProjAttID")]
		public EntitySet<ProjAttValue> ProjAttValues
		{
			get
			{
				return this._ProjAttValues;
			}
			set
			{
				this._ProjAttValues.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FieldType_ProjAttribute", Storage="_FieldType1", ThisKey="FieldType", OtherKey="FieldID", IsForeignKey=true)]
		public FieldType FieldType1
		{
			get
			{
				return this._FieldType1.Entity;
			}
			set
			{
				FieldType previousValue = this._FieldType1.Entity;
				if (((previousValue != value) 
							|| (this._FieldType1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FieldType1.Entity = null;
						previousValue.ProjAttributes.Remove(this);
					}
					this._FieldType1.Entity = value;
					if ((value != null))
					{
						value.ProjAttributes.Add(this);
						this._FieldType = value.FieldID;
					}
					else
					{
						this._FieldType = default(int);
					}
					this.SendPropertyChanged("FieldType1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RegularExpression_ProjAttribute", Storage="_RegularExpression1", ThisKey="RegularExpression", OtherKey="ExpressionID", IsForeignKey=true)]
		public RegularExpression RegularExpression1
		{
			get
			{
				return this._RegularExpression1.Entity;
			}
			set
			{
				RegularExpression previousValue = this._RegularExpression1.Entity;
				if (((previousValue != value) 
							|| (this._RegularExpression1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RegularExpression1.Entity = null;
						previousValue.ProjAttributes.Remove(this);
					}
					this._RegularExpression1.Entity = value;
					if ((value != null))
					{
						value.ProjAttributes.Add(this);
						this._RegularExpression = value.ExpressionID;
					}
					else
					{
						this._RegularExpression = default(Nullable<int>);
					}
					this.SendPropertyChanged("RegularExpression1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProjAttValues(ProjAttValue entity)
		{
			this.SendPropertyChanging();
			entity.ProjAttribute = this;
		}
		
		private void detach_ProjAttValues(ProjAttValue entity)
		{
			this.SendPropertyChanging();
			entity.ProjAttribute = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProjAttValues")]
	public partial class ProjAttValue : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ProjID;
		
		private int _ProjAttID;
		
		private string _Value;
		
		private EntityRef<ProjAttribute> _ProjAttribute;
		
		private EntityRef<Project> _Project;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProjIDChanging(long value);
    partial void OnProjIDChanged();
    partial void OnProjAttIDChanging(int value);
    partial void OnProjAttIDChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    #endregion
		
		public ProjAttValue()
		{
			this._ProjAttribute = default(EntityRef<ProjAttribute>);
			this._Project = default(EntityRef<Project>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long ProjID
		{
			get
			{
				return this._ProjID;
			}
			set
			{
				if ((this._ProjID != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjIDChanging(value);
					this.SendPropertyChanging();
					this._ProjID = value;
					this.SendPropertyChanged("ProjID");
					this.OnProjIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjAttID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ProjAttID
		{
			get
			{
				return this._ProjAttID;
			}
			set
			{
				if ((this._ProjAttID != value))
				{
					if (this._ProjAttribute.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjAttIDChanging(value);
					this.SendPropertyChanging();
					this._ProjAttID = value;
					this.SendPropertyChanged("ProjAttID");
					this.OnProjAttIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="VarChar(MAX)")]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProjAttribute_ProjAttValue", Storage="_ProjAttribute", ThisKey="ProjAttID", OtherKey="ProjAttID", IsForeignKey=true)]
		public ProjAttribute ProjAttribute
		{
			get
			{
				return this._ProjAttribute.Entity;
			}
			set
			{
				ProjAttribute previousValue = this._ProjAttribute.Entity;
				if (((previousValue != value) 
							|| (this._ProjAttribute.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProjAttribute.Entity = null;
						previousValue.ProjAttValues.Remove(this);
					}
					this._ProjAttribute.Entity = value;
					if ((value != null))
					{
						value.ProjAttValues.Add(this);
						this._ProjAttID = value.ProjAttID;
					}
					else
					{
						this._ProjAttID = default(int);
					}
					this.SendPropertyChanged("ProjAttribute");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_ProjAttValue", Storage="_Project", ThisKey="ProjID", OtherKey="ProjID", IsForeignKey=true)]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.ProjAttValues.Remove(this);
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.ProjAttValues.Add(this);
						this._ProjID = value.ProjID;
					}
					else
					{
						this._ProjID = default(long);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProjectRisks")]
	public partial class ProjectRisk : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ProjID;
		
		private int _RiskID;
		
		private short _Probability;
		
		private short _Impact;
		
		private string _Mitigation;
		
		private EntityRef<Project> _Project;
		
		private EntityRef<Risk> _Risk;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProjIDChanging(long value);
    partial void OnProjIDChanged();
    partial void OnRiskIDChanging(int value);
    partial void OnRiskIDChanged();
    partial void OnProbabilityChanging(short value);
    partial void OnProbabilityChanged();
    partial void OnImpactChanging(short value);
    partial void OnImpactChanged();
    partial void OnMitigationChanging(string value);
    partial void OnMitigationChanged();
    #endregion
		
		public ProjectRisk()
		{
			this._Project = default(EntityRef<Project>);
			this._Risk = default(EntityRef<Risk>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long ProjID
		{
			get
			{
				return this._ProjID;
			}
			set
			{
				if ((this._ProjID != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjIDChanging(value);
					this.SendPropertyChanging();
					this._ProjID = value;
					this.SendPropertyChanged("ProjID");
					this.OnProjIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RiskID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int RiskID
		{
			get
			{
				return this._RiskID;
			}
			set
			{
				if ((this._RiskID != value))
				{
					if (this._Risk.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRiskIDChanging(value);
					this.SendPropertyChanging();
					this._RiskID = value;
					this.SendPropertyChanged("RiskID");
					this.OnRiskIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Probability", DbType="SmallInt NOT NULL")]
		public short Probability
		{
			get
			{
				return this._Probability;
			}
			set
			{
				if ((this._Probability != value))
				{
					this.OnProbabilityChanging(value);
					this.SendPropertyChanging();
					this._Probability = value;
					this.SendPropertyChanged("Probability");
					this.OnProbabilityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Impact", DbType="SmallInt NOT NULL")]
		public short Impact
		{
			get
			{
				return this._Impact;
			}
			set
			{
				if ((this._Impact != value))
				{
					this.OnImpactChanging(value);
					this.SendPropertyChanging();
					this._Impact = value;
					this.SendPropertyChanged("Impact");
					this.OnImpactChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mitigation", DbType="VarChar(MAX)")]
		public string Mitigation
		{
			get
			{
				return this._Mitigation;
			}
			set
			{
				if ((this._Mitigation != value))
				{
					this.OnMitigationChanging(value);
					this.SendPropertyChanging();
					this._Mitigation = value;
					this.SendPropertyChanged("Mitigation");
					this.OnMitigationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_ProjectRisk", Storage="_Project", ThisKey="ProjID", OtherKey="ProjID", IsForeignKey=true)]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.ProjectRisks.Remove(this);
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.ProjectRisks.Add(this);
						this._ProjID = value.ProjID;
					}
					else
					{
						this._ProjID = default(long);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Risk_ProjectRisk", Storage="_Risk", ThisKey="RiskID", OtherKey="RiskID", IsForeignKey=true)]
		public Risk Risk
		{
			get
			{
				return this._Risk.Entity;
			}
			set
			{
				Risk previousValue = this._Risk.Entity;
				if (((previousValue != value) 
							|| (this._Risk.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Risk.Entity = null;
						previousValue.ProjectRisks.Remove(this);
					}
					this._Risk.Entity = value;
					if ((value != null))
					{
						value.ProjectRisks.Add(this);
						this._RiskID = value.RiskID;
					}
					else
					{
						this._RiskID = default(int);
					}
					this.SendPropertyChanged("Risk");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Projects")]
	public partial class Project : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ProjID;
		
		private EntitySet<Component> _Components;
		
		private EntitySet<FavoriteProject> _FavoriteProjects;
		
		private EntitySet<ProjAttValue> _ProjAttValues;
		
		private EntitySet<ProjectRisk> _ProjectRisks;
		
		private EntitySet<ProjectsBacklog> _ProjectsBacklogs;
		
		private EntitySet<Sprint> _Sprints;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProjIDChanging(long value);
    partial void OnProjIDChanged();
    #endregion
		
		public Project()
		{
			this._Components = new EntitySet<Component>(new Action<Component>(this.attach_Components), new Action<Component>(this.detach_Components));
			this._FavoriteProjects = new EntitySet<FavoriteProject>(new Action<FavoriteProject>(this.attach_FavoriteProjects), new Action<FavoriteProject>(this.detach_FavoriteProjects));
			this._ProjAttValues = new EntitySet<ProjAttValue>(new Action<ProjAttValue>(this.attach_ProjAttValues), new Action<ProjAttValue>(this.detach_ProjAttValues));
			this._ProjectRisks = new EntitySet<ProjectRisk>(new Action<ProjectRisk>(this.attach_ProjectRisks), new Action<ProjectRisk>(this.detach_ProjectRisks));
			this._ProjectsBacklogs = new EntitySet<ProjectsBacklog>(new Action<ProjectsBacklog>(this.attach_ProjectsBacklogs), new Action<ProjectsBacklog>(this.detach_ProjectsBacklogs));
			this._Sprints = new EntitySet<Sprint>(new Action<Sprint>(this.attach_Sprints), new Action<Sprint>(this.detach_Sprints));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long ProjID
		{
			get
			{
				return this._ProjID;
			}
			set
			{
				if ((this._ProjID != value))
				{
					this.OnProjIDChanging(value);
					this.SendPropertyChanging();
					this._ProjID = value;
					this.SendPropertyChanged("ProjID");
					this.OnProjIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_Component", Storage="_Components", ThisKey="ProjID", OtherKey="ProjID")]
		public EntitySet<Component> Components
		{
			get
			{
				return this._Components;
			}
			set
			{
				this._Components.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_FavoriteProject", Storage="_FavoriteProjects", ThisKey="ProjID", OtherKey="ProjID")]
		public EntitySet<FavoriteProject> FavoriteProjects
		{
			get
			{
				return this._FavoriteProjects;
			}
			set
			{
				this._FavoriteProjects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_ProjAttValue", Storage="_ProjAttValues", ThisKey="ProjID", OtherKey="ProjID")]
		public EntitySet<ProjAttValue> ProjAttValues
		{
			get
			{
				return this._ProjAttValues;
			}
			set
			{
				this._ProjAttValues.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_ProjectRisk", Storage="_ProjectRisks", ThisKey="ProjID", OtherKey="ProjID")]
		public EntitySet<ProjectRisk> ProjectRisks
		{
			get
			{
				return this._ProjectRisks;
			}
			set
			{
				this._ProjectRisks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_ProjectsBacklog", Storage="_ProjectsBacklogs", ThisKey="ProjID", OtherKey="ProjID")]
		public EntitySet<ProjectsBacklog> ProjectsBacklogs
		{
			get
			{
				return this._ProjectsBacklogs;
			}
			set
			{
				this._ProjectsBacklogs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_Sprint", Storage="_Sprints", ThisKey="ProjID", OtherKey="ProjID")]
		public EntitySet<Sprint> Sprints
		{
			get
			{
				return this._Sprints;
			}
			set
			{
				this._Sprints.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Components(Component entity)
		{
			this.SendPropertyChanging();
			entity.Project = this;
		}
		
		private void detach_Components(Component entity)
		{
			this.SendPropertyChanging();
			entity.Project = null;
		}
		
		private void attach_FavoriteProjects(FavoriteProject entity)
		{
			this.SendPropertyChanging();
			entity.Project = this;
		}
		
		private void detach_FavoriteProjects(FavoriteProject entity)
		{
			this.SendPropertyChanging();
			entity.Project = null;
		}
		
		private void attach_ProjAttValues(ProjAttValue entity)
		{
			this.SendPropertyChanging();
			entity.Project = this;
		}
		
		private void detach_ProjAttValues(ProjAttValue entity)
		{
			this.SendPropertyChanging();
			entity.Project = null;
		}
		
		private void attach_ProjectRisks(ProjectRisk entity)
		{
			this.SendPropertyChanging();
			entity.Project = this;
		}
		
		private void detach_ProjectRisks(ProjectRisk entity)
		{
			this.SendPropertyChanging();
			entity.Project = null;
		}
		
		private void attach_ProjectsBacklogs(ProjectsBacklog entity)
		{
			this.SendPropertyChanging();
			entity.Project = this;
		}
		
		private void detach_ProjectsBacklogs(ProjectsBacklog entity)
		{
			this.SendPropertyChanging();
			entity.Project = null;
		}
		
		private void attach_Sprints(Sprint entity)
		{
			this.SendPropertyChanging();
			entity.Project = this;
		}
		
		private void detach_Sprints(Sprint entity)
		{
			this.SendPropertyChanging();
			entity.Project = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProjectsBacklog")]
	public partial class ProjectsBacklog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ProjID;
		
		private long _IssueID;
		
		private EntityRef<Issue> _Issue;
		
		private EntityRef<Project> _Project;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProjIDChanging(long value);
    partial void OnProjIDChanged();
    partial void OnIssueIDChanging(long value);
    partial void OnIssueIDChanged();
    #endregion
		
		public ProjectsBacklog()
		{
			this._Issue = default(EntityRef<Issue>);
			this._Project = default(EntityRef<Project>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long ProjID
		{
			get
			{
				return this._ProjID;
			}
			set
			{
				if ((this._ProjID != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjIDChanging(value);
					this.SendPropertyChanging();
					this._ProjID = value;
					this.SendPropertyChanged("ProjID");
					this.OnProjIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IssueID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long IssueID
		{
			get
			{
				return this._IssueID;
			}
			set
			{
				if ((this._IssueID != value))
				{
					if (this._Issue.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIssueIDChanging(value);
					this.SendPropertyChanging();
					this._IssueID = value;
					this.SendPropertyChanged("IssueID");
					this.OnIssueIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Issue_ProjectsBacklog", Storage="_Issue", ThisKey="IssueID", OtherKey="IssueID", IsForeignKey=true)]
		public Issue Issue
		{
			get
			{
				return this._Issue.Entity;
			}
			set
			{
				Issue previousValue = this._Issue.Entity;
				if (((previousValue != value) 
							|| (this._Issue.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Issue.Entity = null;
						previousValue.ProjectsBacklogs.Remove(this);
					}
					this._Issue.Entity = value;
					if ((value != null))
					{
						value.ProjectsBacklogs.Add(this);
						this._IssueID = value.IssueID;
					}
					else
					{
						this._IssueID = default(long);
					}
					this.SendPropertyChanged("Issue");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_ProjectsBacklog", Storage="_Project", ThisKey="ProjID", OtherKey="ProjID", IsForeignKey=true)]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.ProjectsBacklogs.Remove(this);
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.ProjectsBacklogs.Add(this);
						this._ProjID = value.ProjID;
					}
					else
					{
						this._ProjID = default(long);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RegularExpressions")]
	public partial class RegularExpression : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ExpressionID;
		
		private string _ExpressionName;
		
		private string _Value;
		
		private string _Error;
		
		private EntitySet<CompAttribute> _CompAttributes;
		
		private EntitySet<EmpAttribute> _EmpAttributes;
		
		private EntitySet<IssueAttribute> _IssueAttributes;
		
		private EntitySet<OrgAttribute> _OrgAttributes;
		
		private EntitySet<ProjAttribute> _ProjAttributes;
		
		private EntitySet<SprintAttribute> _SprintAttributes;
		
		private EntitySet<SubCompAttribute> _SubCompAttributes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnExpressionIDChanging(int value);
    partial void OnExpressionIDChanged();
    partial void OnExpressionNameChanging(string value);
    partial void OnExpressionNameChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    partial void OnErrorChanging(string value);
    partial void OnErrorChanged();
    #endregion
		
		public RegularExpression()
		{
			this._CompAttributes = new EntitySet<CompAttribute>(new Action<CompAttribute>(this.attach_CompAttributes), new Action<CompAttribute>(this.detach_CompAttributes));
			this._EmpAttributes = new EntitySet<EmpAttribute>(new Action<EmpAttribute>(this.attach_EmpAttributes), new Action<EmpAttribute>(this.detach_EmpAttributes));
			this._IssueAttributes = new EntitySet<IssueAttribute>(new Action<IssueAttribute>(this.attach_IssueAttributes), new Action<IssueAttribute>(this.detach_IssueAttributes));
			this._OrgAttributes = new EntitySet<OrgAttribute>(new Action<OrgAttribute>(this.attach_OrgAttributes), new Action<OrgAttribute>(this.detach_OrgAttributes));
			this._ProjAttributes = new EntitySet<ProjAttribute>(new Action<ProjAttribute>(this.attach_ProjAttributes), new Action<ProjAttribute>(this.detach_ProjAttributes));
			this._SprintAttributes = new EntitySet<SprintAttribute>(new Action<SprintAttribute>(this.attach_SprintAttributes), new Action<SprintAttribute>(this.detach_SprintAttributes));
			this._SubCompAttributes = new EntitySet<SubCompAttribute>(new Action<SubCompAttribute>(this.attach_SubCompAttributes), new Action<SubCompAttribute>(this.detach_SubCompAttributes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExpressionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ExpressionID
		{
			get
			{
				return this._ExpressionID;
			}
			set
			{
				if ((this._ExpressionID != value))
				{
					this.OnExpressionIDChanging(value);
					this.SendPropertyChanging();
					this._ExpressionID = value;
					this.SendPropertyChanged("ExpressionID");
					this.OnExpressionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExpressionName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ExpressionName
		{
			get
			{
				return this._ExpressionName;
			}
			set
			{
				if ((this._ExpressionName != value))
				{
					this.OnExpressionNameChanging(value);
					this.SendPropertyChanging();
					this._ExpressionName = value;
					this.SendPropertyChanged("ExpressionName");
					this.OnExpressionNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Error", DbType="VarChar(MAX)")]
		public string Error
		{
			get
			{
				return this._Error;
			}
			set
			{
				if ((this._Error != value))
				{
					this.OnErrorChanging(value);
					this.SendPropertyChanging();
					this._Error = value;
					this.SendPropertyChanged("Error");
					this.OnErrorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RegularExpression_CompAttribute", Storage="_CompAttributes", ThisKey="ExpressionID", OtherKey="RegularExpression")]
		public EntitySet<CompAttribute> CompAttributes
		{
			get
			{
				return this._CompAttributes;
			}
			set
			{
				this._CompAttributes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RegularExpression_EmpAttribute", Storage="_EmpAttributes", ThisKey="ExpressionID", OtherKey="RegularExpression")]
		public EntitySet<EmpAttribute> EmpAttributes
		{
			get
			{
				return this._EmpAttributes;
			}
			set
			{
				this._EmpAttributes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RegularExpression_IssueAttribute", Storage="_IssueAttributes", ThisKey="ExpressionID", OtherKey="RegularExpression")]
		public EntitySet<IssueAttribute> IssueAttributes
		{
			get
			{
				return this._IssueAttributes;
			}
			set
			{
				this._IssueAttributes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RegularExpression_OrgAttribute", Storage="_OrgAttributes", ThisKey="ExpressionID", OtherKey="RegularExpression")]
		public EntitySet<OrgAttribute> OrgAttributes
		{
			get
			{
				return this._OrgAttributes;
			}
			set
			{
				this._OrgAttributes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RegularExpression_ProjAttribute", Storage="_ProjAttributes", ThisKey="ExpressionID", OtherKey="RegularExpression")]
		public EntitySet<ProjAttribute> ProjAttributes
		{
			get
			{
				return this._ProjAttributes;
			}
			set
			{
				this._ProjAttributes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RegularExpression_SprintAttribute", Storage="_SprintAttributes", ThisKey="ExpressionID", OtherKey="RegularExpression")]
		public EntitySet<SprintAttribute> SprintAttributes
		{
			get
			{
				return this._SprintAttributes;
			}
			set
			{
				this._SprintAttributes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RegularExpression_SubCompAttribute", Storage="_SubCompAttributes", ThisKey="ExpressionID", OtherKey="RegularExpression")]
		public EntitySet<SubCompAttribute> SubCompAttributes
		{
			get
			{
				return this._SubCompAttributes;
			}
			set
			{
				this._SubCompAttributes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CompAttributes(CompAttribute entity)
		{
			this.SendPropertyChanging();
			entity.RegularExpression1 = this;
		}
		
		private void detach_CompAttributes(CompAttribute entity)
		{
			this.SendPropertyChanging();
			entity.RegularExpression1 = null;
		}
		
		private void attach_EmpAttributes(EmpAttribute entity)
		{
			this.SendPropertyChanging();
			entity.RegularExpression1 = this;
		}
		
		private void detach_EmpAttributes(EmpAttribute entity)
		{
			this.SendPropertyChanging();
			entity.RegularExpression1 = null;
		}
		
		private void attach_IssueAttributes(IssueAttribute entity)
		{
			this.SendPropertyChanging();
			entity.RegularExpression1 = this;
		}
		
		private void detach_IssueAttributes(IssueAttribute entity)
		{
			this.SendPropertyChanging();
			entity.RegularExpression1 = null;
		}
		
		private void attach_OrgAttributes(OrgAttribute entity)
		{
			this.SendPropertyChanging();
			entity.RegularExpression1 = this;
		}
		
		private void detach_OrgAttributes(OrgAttribute entity)
		{
			this.SendPropertyChanging();
			entity.RegularExpression1 = null;
		}
		
		private void attach_ProjAttributes(ProjAttribute entity)
		{
			this.SendPropertyChanging();
			entity.RegularExpression1 = this;
		}
		
		private void detach_ProjAttributes(ProjAttribute entity)
		{
			this.SendPropertyChanging();
			entity.RegularExpression1 = null;
		}
		
		private void attach_SprintAttributes(SprintAttribute entity)
		{
			this.SendPropertyChanging();
			entity.RegularExpression1 = this;
		}
		
		private void detach_SprintAttributes(SprintAttribute entity)
		{
			this.SendPropertyChanging();
			entity.RegularExpression1 = null;
		}
		
		private void attach_SubCompAttributes(SubCompAttribute entity)
		{
			this.SendPropertyChanging();
			entity.RegularExpression1 = this;
		}
		
		private void detach_SubCompAttributes(SubCompAttribute entity)
		{
			this.SendPropertyChanging();
			entity.RegularExpression1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RiskCategories")]
	public partial class RiskCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CategoryID;
		
		private string _CategoryName;
		
		private EntitySet<Risk> _Risks;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCategoryIDChanging(int value);
    partial void OnCategoryIDChanged();
    partial void OnCategoryNameChanging(string value);
    partial void OnCategoryNameChanged();
    #endregion
		
		public RiskCategory()
		{
			this._Risks = new EntitySet<Risk>(new Action<Risk>(this.attach_Risks), new Action<Risk>(this.detach_Risks));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CategoryID
		{
			get
			{
				return this._CategoryID;
			}
			set
			{
				if ((this._CategoryID != value))
				{
					this.OnCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._CategoryID = value;
					this.SendPropertyChanged("CategoryID");
					this.OnCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryName", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string CategoryName
		{
			get
			{
				return this._CategoryName;
			}
			set
			{
				if ((this._CategoryName != value))
				{
					this.OnCategoryNameChanging(value);
					this.SendPropertyChanging();
					this._CategoryName = value;
					this.SendPropertyChanged("CategoryName");
					this.OnCategoryNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RiskCategory_Risk", Storage="_Risks", ThisKey="CategoryID", OtherKey="Category")]
		public EntitySet<Risk> Risks
		{
			get
			{
				return this._Risks;
			}
			set
			{
				this._Risks.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Risks(Risk entity)
		{
			this.SendPropertyChanging();
			entity.RiskCategory = this;
		}
		
		private void detach_Risks(Risk entity)
		{
			this.SendPropertyChanging();
			entity.RiskCategory = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Risks")]
	public partial class Risk : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RiskID;
		
		private string _Description;
		
		private int _Category;
		
		private bool _OrganizationLevel;
		
		private EntitySet<ProjectRisk> _ProjectRisks;
		
		private EntityRef<RiskCategory> _RiskCategory;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRiskIDChanging(int value);
    partial void OnRiskIDChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnCategoryChanging(int value);
    partial void OnCategoryChanged();
    partial void OnOrganizationLevelChanging(bool value);
    partial void OnOrganizationLevelChanged();
    #endregion
		
		public Risk()
		{
			this._ProjectRisks = new EntitySet<ProjectRisk>(new Action<ProjectRisk>(this.attach_ProjectRisks), new Action<ProjectRisk>(this.detach_ProjectRisks));
			this._RiskCategory = default(EntityRef<RiskCategory>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RiskID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RiskID
		{
			get
			{
				return this._RiskID;
			}
			set
			{
				if ((this._RiskID != value))
				{
					this.OnRiskIDChanging(value);
					this.SendPropertyChanging();
					this._RiskID = value;
					this.SendPropertyChanged("RiskID");
					this.OnRiskIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Category", DbType="Int NOT NULL")]
		public int Category
		{
			get
			{
				return this._Category;
			}
			set
			{
				if ((this._Category != value))
				{
					if (this._RiskCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategoryChanging(value);
					this.SendPropertyChanging();
					this._Category = value;
					this.SendPropertyChanged("Category");
					this.OnCategoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrganizationLevel", DbType="Bit NOT NULL")]
		public bool OrganizationLevel
		{
			get
			{
				return this._OrganizationLevel;
			}
			set
			{
				if ((this._OrganizationLevel != value))
				{
					this.OnOrganizationLevelChanging(value);
					this.SendPropertyChanging();
					this._OrganizationLevel = value;
					this.SendPropertyChanged("OrganizationLevel");
					this.OnOrganizationLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Risk_ProjectRisk", Storage="_ProjectRisks", ThisKey="RiskID", OtherKey="RiskID")]
		public EntitySet<ProjectRisk> ProjectRisks
		{
			get
			{
				return this._ProjectRisks;
			}
			set
			{
				this._ProjectRisks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RiskCategory_Risk", Storage="_RiskCategory", ThisKey="Category", OtherKey="CategoryID", IsForeignKey=true)]
		public RiskCategory RiskCategory
		{
			get
			{
				return this._RiskCategory.Entity;
			}
			set
			{
				RiskCategory previousValue = this._RiskCategory.Entity;
				if (((previousValue != value) 
							|| (this._RiskCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RiskCategory.Entity = null;
						previousValue.Risks.Remove(this);
					}
					this._RiskCategory.Entity = value;
					if ((value != null))
					{
						value.Risks.Add(this);
						this._Category = value.CategoryID;
					}
					else
					{
						this._Category = default(int);
					}
					this.SendPropertyChanged("RiskCategory");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProjectRisks(ProjectRisk entity)
		{
			this.SendPropertyChanging();
			entity.Risk = this;
		}
		
		private void detach_ProjectRisks(ProjectRisk entity)
		{
			this.SendPropertyChanging();
			entity.Risk = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RoleRights")]
	public partial class RoleRight : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RoleID;
		
		private int _RightID;
		
		private EntityRef<AccessRight> _AccessRight;
		
		private EntityRef<Role> _Role;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoleIDChanging(int value);
    partial void OnRoleIDChanged();
    partial void OnRightIDChanging(int value);
    partial void OnRightIDChanged();
    #endregion
		
		public RoleRight()
		{
			this._AccessRight = default(EntityRef<AccessRight>);
			this._Role = default(EntityRef<Role>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIDChanging(value);
					this.SendPropertyChanging();
					this._RoleID = value;
					this.SendPropertyChanged("RoleID");
					this.OnRoleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RightID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int RightID
		{
			get
			{
				return this._RightID;
			}
			set
			{
				if ((this._RightID != value))
				{
					if (this._AccessRight.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRightIDChanging(value);
					this.SendPropertyChanging();
					this._RightID = value;
					this.SendPropertyChanged("RightID");
					this.OnRightIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccessRight_RoleRight", Storage="_AccessRight", ThisKey="RightID", OtherKey="RightID", IsForeignKey=true)]
		public AccessRight AccessRight
		{
			get
			{
				return this._AccessRight.Entity;
			}
			set
			{
				AccessRight previousValue = this._AccessRight.Entity;
				if (((previousValue != value) 
							|| (this._AccessRight.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AccessRight.Entity = null;
						previousValue.RoleRights.Remove(this);
					}
					this._AccessRight.Entity = value;
					if ((value != null))
					{
						value.RoleRights.Add(this);
						this._RightID = value.RightID;
					}
					else
					{
						this._RightID = default(int);
					}
					this.SendPropertyChanged("AccessRight");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_RoleRight", Storage="_Role", ThisKey="RoleID", OtherKey="RoleID", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.RoleRights.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.RoleRights.Add(this);
						this._RoleID = value.RoleID;
					}
					else
					{
						this._RoleID = default(int);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Roles")]
	public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RoleID;
		
		private string _RoleName;
		
		private EntitySet<RoleRight> _RoleRights;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoleIDChanging(int value);
    partial void OnRoleIDChanged();
    partial void OnRoleNameChanging(string value);
    partial void OnRoleNameChanged();
    #endregion
		
		public Role()
		{
			this._RoleRights = new EntitySet<RoleRight>(new Action<RoleRight>(this.attach_RoleRights), new Action<RoleRight>(this.detach_RoleRights));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					this.OnRoleIDChanging(value);
					this.SendPropertyChanging();
					this._RoleID = value;
					this.SendPropertyChanged("RoleID");
					this.OnRoleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleName", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string RoleName
		{
			get
			{
				return this._RoleName;
			}
			set
			{
				if ((this._RoleName != value))
				{
					this.OnRoleNameChanging(value);
					this.SendPropertyChanging();
					this._RoleName = value;
					this.SendPropertyChanged("RoleName");
					this.OnRoleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_RoleRight", Storage="_RoleRights", ThisKey="RoleID", OtherKey="RoleID")]
		public EntitySet<RoleRight> RoleRights
		{
			get
			{
				return this._RoleRights;
			}
			set
			{
				this._RoleRights.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RoleRights(RoleRight entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_RoleRights(RoleRight entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ScrumMeetings")]
	public partial class ScrumMeeting : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _MeetingID;
		
		private long _SprintID;
		
		private System.DateTime _MeetingDate;
		
		private EntitySet<MeetingDetail> _MeetingDetails;
		
		private EntityRef<Sprint> _Sprint;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMeetingIDChanging(long value);
    partial void OnMeetingIDChanged();
    partial void OnSprintIDChanging(long value);
    partial void OnSprintIDChanged();
    partial void OnMeetingDateChanging(System.DateTime value);
    partial void OnMeetingDateChanged();
    #endregion
		
		public ScrumMeeting()
		{
			this._MeetingDetails = new EntitySet<MeetingDetail>(new Action<MeetingDetail>(this.attach_MeetingDetails), new Action<MeetingDetail>(this.detach_MeetingDetails));
			this._Sprint = default(EntityRef<Sprint>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MeetingID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long MeetingID
		{
			get
			{
				return this._MeetingID;
			}
			set
			{
				if ((this._MeetingID != value))
				{
					this.OnMeetingIDChanging(value);
					this.SendPropertyChanging();
					this._MeetingID = value;
					this.SendPropertyChanged("MeetingID");
					this.OnMeetingIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SprintID", DbType="BigInt NOT NULL")]
		public long SprintID
		{
			get
			{
				return this._SprintID;
			}
			set
			{
				if ((this._SprintID != value))
				{
					if (this._Sprint.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSprintIDChanging(value);
					this.SendPropertyChanging();
					this._SprintID = value;
					this.SendPropertyChanged("SprintID");
					this.OnSprintIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MeetingDate", DbType="Date NOT NULL")]
		public System.DateTime MeetingDate
		{
			get
			{
				return this._MeetingDate;
			}
			set
			{
				if ((this._MeetingDate != value))
				{
					this.OnMeetingDateChanging(value);
					this.SendPropertyChanging();
					this._MeetingDate = value;
					this.SendPropertyChanged("MeetingDate");
					this.OnMeetingDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ScrumMeeting_MeetingDetail", Storage="_MeetingDetails", ThisKey="MeetingID", OtherKey="MeetingID")]
		public EntitySet<MeetingDetail> MeetingDetails
		{
			get
			{
				return this._MeetingDetails;
			}
			set
			{
				this._MeetingDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sprint_ScrumMeeting", Storage="_Sprint", ThisKey="SprintID", OtherKey="SprintID", IsForeignKey=true)]
		public Sprint Sprint
		{
			get
			{
				return this._Sprint.Entity;
			}
			set
			{
				Sprint previousValue = this._Sprint.Entity;
				if (((previousValue != value) 
							|| (this._Sprint.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Sprint.Entity = null;
						previousValue.ScrumMeetings.Remove(this);
					}
					this._Sprint.Entity = value;
					if ((value != null))
					{
						value.ScrumMeetings.Add(this);
						this._SprintID = value.SprintID;
					}
					else
					{
						this._SprintID = default(long);
					}
					this.SendPropertyChanged("Sprint");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MeetingDetails(MeetingDetail entity)
		{
			this.SendPropertyChanging();
			entity.ScrumMeeting = this;
		}
		
		private void detach_MeetingDetails(MeetingDetail entity)
		{
			this.SendPropertyChanging();
			entity.ScrumMeeting = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SearchFilters")]
	public partial class SearchFilter : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FilterID;
		
		private string _FilterName;
		
		private string _Value;
		
		private long _EmpID;
		
		private EntityRef<Employee> _Employee;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFilterIDChanging(int value);
    partial void OnFilterIDChanged();
    partial void OnFilterNameChanging(string value);
    partial void OnFilterNameChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    partial void OnEmpIDChanging(long value);
    partial void OnEmpIDChanged();
    #endregion
		
		public SearchFilter()
		{
			this._Employee = default(EntityRef<Employee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FilterID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FilterID
		{
			get
			{
				return this._FilterID;
			}
			set
			{
				if ((this._FilterID != value))
				{
					this.OnFilterIDChanging(value);
					this.SendPropertyChanging();
					this._FilterID = value;
					this.SendPropertyChanged("FilterID");
					this.OnFilterIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FilterName", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string FilterName
		{
			get
			{
				return this._FilterName;
			}
			set
			{
				if ((this._FilterName != value))
				{
					this.OnFilterNameChanging(value);
					this.SendPropertyChanging();
					this._FilterName = value;
					this.SendPropertyChanged("FilterName");
					this.OnFilterNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmpID", DbType="BigInt NOT NULL")]
		public long EmpID
		{
			get
			{
				return this._EmpID;
			}
			set
			{
				if ((this._EmpID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmpIDChanging(value);
					this.SendPropertyChanging();
					this._EmpID = value;
					this.SendPropertyChanged("EmpID");
					this.OnEmpIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_SearchFilter", Storage="_Employee", ThisKey="EmpID", OtherKey="EmpID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.SearchFilters.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.SearchFilters.Add(this);
						this._EmpID = value.EmpID;
					}
					else
					{
						this._EmpID = default(long);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SprintAttributes")]
	public partial class SprintAttribute : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SprintAttID;
		
		private string _SprintAttName;
		
		private int _FieldType;
		
		private string _DefaultValue;
		
		private bool _CanNull;
		
		private System.Nullable<int> _RegularExpression;
		
		private bool _IsSystemLevel;
		
		private EntitySet<SprintAttValue> _SprintAttValues;
		
		private EntityRef<FieldType> _FieldType1;
		
		private EntityRef<RegularExpression> _RegularExpression1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSprintAttIDChanging(int value);
    partial void OnSprintAttIDChanged();
    partial void OnSprintAttNameChanging(string value);
    partial void OnSprintAttNameChanged();
    partial void OnFieldTypeChanging(int value);
    partial void OnFieldTypeChanged();
    partial void OnDefaultValueChanging(string value);
    partial void OnDefaultValueChanged();
    partial void OnCanNullChanging(bool value);
    partial void OnCanNullChanged();
    partial void OnRegularExpressionChanging(System.Nullable<int> value);
    partial void OnRegularExpressionChanged();
    partial void OnIsSystemLevelChanging(bool value);
    partial void OnIsSystemLevelChanged();
    #endregion
		
		public SprintAttribute()
		{
			this._SprintAttValues = new EntitySet<SprintAttValue>(new Action<SprintAttValue>(this.attach_SprintAttValues), new Action<SprintAttValue>(this.detach_SprintAttValues));
			this._FieldType1 = default(EntityRef<FieldType>);
			this._RegularExpression1 = default(EntityRef<RegularExpression>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SprintAttID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SprintAttID
		{
			get
			{
				return this._SprintAttID;
			}
			set
			{
				if ((this._SprintAttID != value))
				{
					this.OnSprintAttIDChanging(value);
					this.SendPropertyChanging();
					this._SprintAttID = value;
					this.SendPropertyChanged("SprintAttID");
					this.OnSprintAttIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SprintAttName", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string SprintAttName
		{
			get
			{
				return this._SprintAttName;
			}
			set
			{
				if ((this._SprintAttName != value))
				{
					this.OnSprintAttNameChanging(value);
					this.SendPropertyChanging();
					this._SprintAttName = value;
					this.SendPropertyChanged("SprintAttName");
					this.OnSprintAttNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FieldType", DbType="Int NOT NULL")]
		public int FieldType
		{
			get
			{
				return this._FieldType;
			}
			set
			{
				if ((this._FieldType != value))
				{
					if (this._FieldType1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFieldTypeChanging(value);
					this.SendPropertyChanging();
					this._FieldType = value;
					this.SendPropertyChanged("FieldType");
					this.OnFieldTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DefaultValue", DbType="VarChar(MAX)")]
		public string DefaultValue
		{
			get
			{
				return this._DefaultValue;
			}
			set
			{
				if ((this._DefaultValue != value))
				{
					this.OnDefaultValueChanging(value);
					this.SendPropertyChanging();
					this._DefaultValue = value;
					this.SendPropertyChanged("DefaultValue");
					this.OnDefaultValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CanNull", DbType="Bit NOT NULL")]
		public bool CanNull
		{
			get
			{
				return this._CanNull;
			}
			set
			{
				if ((this._CanNull != value))
				{
					this.OnCanNullChanging(value);
					this.SendPropertyChanging();
					this._CanNull = value;
					this.SendPropertyChanged("CanNull");
					this.OnCanNullChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegularExpression", DbType="Int")]
		public System.Nullable<int> RegularExpression
		{
			get
			{
				return this._RegularExpression;
			}
			set
			{
				if ((this._RegularExpression != value))
				{
					if (this._RegularExpression1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRegularExpressionChanging(value);
					this.SendPropertyChanging();
					this._RegularExpression = value;
					this.SendPropertyChanged("RegularExpression");
					this.OnRegularExpressionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsSystemLevel", DbType="Bit NOT NULL")]
		public bool IsSystemLevel
		{
			get
			{
				return this._IsSystemLevel;
			}
			set
			{
				if ((this._IsSystemLevel != value))
				{
					this.OnIsSystemLevelChanging(value);
					this.SendPropertyChanging();
					this._IsSystemLevel = value;
					this.SendPropertyChanged("IsSystemLevel");
					this.OnIsSystemLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SprintAttribute_SprintAttValue", Storage="_SprintAttValues", ThisKey="SprintAttID", OtherKey="SprintAttID")]
		public EntitySet<SprintAttValue> SprintAttValues
		{
			get
			{
				return this._SprintAttValues;
			}
			set
			{
				this._SprintAttValues.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FieldType_SprintAttribute", Storage="_FieldType1", ThisKey="FieldType", OtherKey="FieldID", IsForeignKey=true)]
		public FieldType FieldType1
		{
			get
			{
				return this._FieldType1.Entity;
			}
			set
			{
				FieldType previousValue = this._FieldType1.Entity;
				if (((previousValue != value) 
							|| (this._FieldType1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FieldType1.Entity = null;
						previousValue.SprintAttributes.Remove(this);
					}
					this._FieldType1.Entity = value;
					if ((value != null))
					{
						value.SprintAttributes.Add(this);
						this._FieldType = value.FieldID;
					}
					else
					{
						this._FieldType = default(int);
					}
					this.SendPropertyChanged("FieldType1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RegularExpression_SprintAttribute", Storage="_RegularExpression1", ThisKey="RegularExpression", OtherKey="ExpressionID", IsForeignKey=true)]
		public RegularExpression RegularExpression1
		{
			get
			{
				return this._RegularExpression1.Entity;
			}
			set
			{
				RegularExpression previousValue = this._RegularExpression1.Entity;
				if (((previousValue != value) 
							|| (this._RegularExpression1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RegularExpression1.Entity = null;
						previousValue.SprintAttributes.Remove(this);
					}
					this._RegularExpression1.Entity = value;
					if ((value != null))
					{
						value.SprintAttributes.Add(this);
						this._RegularExpression = value.ExpressionID;
					}
					else
					{
						this._RegularExpression = default(Nullable<int>);
					}
					this.SendPropertyChanged("RegularExpression1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SprintAttValues(SprintAttValue entity)
		{
			this.SendPropertyChanging();
			entity.SprintAttribute = this;
		}
		
		private void detach_SprintAttValues(SprintAttValue entity)
		{
			this.SendPropertyChanging();
			entity.SprintAttribute = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SprintAttValues")]
	public partial class SprintAttValue : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _SprintID;
		
		private int _SprintAttID;
		
		private string _Value;
		
		private EntityRef<SprintAttribute> _SprintAttribute;
		
		private EntityRef<Sprint> _Sprint;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSprintIDChanging(long value);
    partial void OnSprintIDChanged();
    partial void OnSprintAttIDChanging(int value);
    partial void OnSprintAttIDChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    #endregion
		
		public SprintAttValue()
		{
			this._SprintAttribute = default(EntityRef<SprintAttribute>);
			this._Sprint = default(EntityRef<Sprint>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SprintID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long SprintID
		{
			get
			{
				return this._SprintID;
			}
			set
			{
				if ((this._SprintID != value))
				{
					if (this._Sprint.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSprintIDChanging(value);
					this.SendPropertyChanging();
					this._SprintID = value;
					this.SendPropertyChanged("SprintID");
					this.OnSprintIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SprintAttID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SprintAttID
		{
			get
			{
				return this._SprintAttID;
			}
			set
			{
				if ((this._SprintAttID != value))
				{
					if (this._SprintAttribute.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSprintAttIDChanging(value);
					this.SendPropertyChanging();
					this._SprintAttID = value;
					this.SendPropertyChanged("SprintAttID");
					this.OnSprintAttIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="VarChar(MAX)")]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SprintAttribute_SprintAttValue", Storage="_SprintAttribute", ThisKey="SprintAttID", OtherKey="SprintAttID", IsForeignKey=true)]
		public SprintAttribute SprintAttribute
		{
			get
			{
				return this._SprintAttribute.Entity;
			}
			set
			{
				SprintAttribute previousValue = this._SprintAttribute.Entity;
				if (((previousValue != value) 
							|| (this._SprintAttribute.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SprintAttribute.Entity = null;
						previousValue.SprintAttValues.Remove(this);
					}
					this._SprintAttribute.Entity = value;
					if ((value != null))
					{
						value.SprintAttValues.Add(this);
						this._SprintAttID = value.SprintAttID;
					}
					else
					{
						this._SprintAttID = default(int);
					}
					this.SendPropertyChanged("SprintAttribute");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sprint_SprintAttValue", Storage="_Sprint", ThisKey="SprintID", OtherKey="SprintID", IsForeignKey=true)]
		public Sprint Sprint
		{
			get
			{
				return this._Sprint.Entity;
			}
			set
			{
				Sprint previousValue = this._Sprint.Entity;
				if (((previousValue != value) 
							|| (this._Sprint.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Sprint.Entity = null;
						previousValue.SprintAttValues.Remove(this);
					}
					this._Sprint.Entity = value;
					if ((value != null))
					{
						value.SprintAttValues.Add(this);
						this._SprintID = value.SprintID;
					}
					else
					{
						this._SprintID = default(long);
					}
					this.SendPropertyChanged("Sprint");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SprintDailyEffort")]
	public partial class SprintDailyEffort : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _SprintID;
		
		private int _Day;
		
		private double _WorkDone;
		
		private EntityRef<Sprint> _Sprint;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSprintIDChanging(long value);
    partial void OnSprintIDChanged();
    partial void OnDayChanging(int value);
    partial void OnDayChanged();
    partial void OnWorkDoneChanging(double value);
    partial void OnWorkDoneChanged();
    #endregion
		
		public SprintDailyEffort()
		{
			this._Sprint = default(EntityRef<Sprint>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SprintID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long SprintID
		{
			get
			{
				return this._SprintID;
			}
			set
			{
				if ((this._SprintID != value))
				{
					if (this._Sprint.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSprintIDChanging(value);
					this.SendPropertyChanging();
					this._SprintID = value;
					this.SendPropertyChanged("SprintID");
					this.OnSprintIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Day", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Day
		{
			get
			{
				return this._Day;
			}
			set
			{
				if ((this._Day != value))
				{
					this.OnDayChanging(value);
					this.SendPropertyChanging();
					this._Day = value;
					this.SendPropertyChanged("Day");
					this.OnDayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkDone", DbType="Float NOT NULL")]
		public double WorkDone
		{
			get
			{
				return this._WorkDone;
			}
			set
			{
				if ((this._WorkDone != value))
				{
					this.OnWorkDoneChanging(value);
					this.SendPropertyChanging();
					this._WorkDone = value;
					this.SendPropertyChanged("WorkDone");
					this.OnWorkDoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sprint_SprintDailyEffort", Storage="_Sprint", ThisKey="SprintID", OtherKey="SprintID", IsForeignKey=true)]
		public Sprint Sprint
		{
			get
			{
				return this._Sprint.Entity;
			}
			set
			{
				Sprint previousValue = this._Sprint.Entity;
				if (((previousValue != value) 
							|| (this._Sprint.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Sprint.Entity = null;
						previousValue.SprintDailyEfforts.Remove(this);
					}
					this._Sprint.Entity = value;
					if ((value != null))
					{
						value.SprintDailyEfforts.Add(this);
						this._SprintID = value.SprintID;
					}
					else
					{
						this._SprintID = default(long);
					}
					this.SendPropertyChanged("Sprint");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Sprints")]
	public partial class Sprint : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _SprintID;
		
		private long _ProjID;
		
		private EntitySet<ScrumMeeting> _ScrumMeetings;
		
		private EntitySet<SprintAttValue> _SprintAttValues;
		
		private EntitySet<SprintDailyEffort> _SprintDailyEfforts;
		
		private EntitySet<SprintsBacklog> _SprintsBacklogs;
		
		private EntityRef<Project> _Project;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSprintIDChanging(long value);
    partial void OnSprintIDChanged();
    partial void OnProjIDChanging(long value);
    partial void OnProjIDChanged();
    #endregion
		
		public Sprint()
		{
			this._ScrumMeetings = new EntitySet<ScrumMeeting>(new Action<ScrumMeeting>(this.attach_ScrumMeetings), new Action<ScrumMeeting>(this.detach_ScrumMeetings));
			this._SprintAttValues = new EntitySet<SprintAttValue>(new Action<SprintAttValue>(this.attach_SprintAttValues), new Action<SprintAttValue>(this.detach_SprintAttValues));
			this._SprintDailyEfforts = new EntitySet<SprintDailyEffort>(new Action<SprintDailyEffort>(this.attach_SprintDailyEfforts), new Action<SprintDailyEffort>(this.detach_SprintDailyEfforts));
			this._SprintsBacklogs = new EntitySet<SprintsBacklog>(new Action<SprintsBacklog>(this.attach_SprintsBacklogs), new Action<SprintsBacklog>(this.detach_SprintsBacklogs));
			this._Project = default(EntityRef<Project>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SprintID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long SprintID
		{
			get
			{
				return this._SprintID;
			}
			set
			{
				if ((this._SprintID != value))
				{
					this.OnSprintIDChanging(value);
					this.SendPropertyChanging();
					this._SprintID = value;
					this.SendPropertyChanged("SprintID");
					this.OnSprintIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjID", DbType="BigInt NOT NULL")]
		public long ProjID
		{
			get
			{
				return this._ProjID;
			}
			set
			{
				if ((this._ProjID != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjIDChanging(value);
					this.SendPropertyChanging();
					this._ProjID = value;
					this.SendPropertyChanged("ProjID");
					this.OnProjIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sprint_ScrumMeeting", Storage="_ScrumMeetings", ThisKey="SprintID", OtherKey="SprintID")]
		public EntitySet<ScrumMeeting> ScrumMeetings
		{
			get
			{
				return this._ScrumMeetings;
			}
			set
			{
				this._ScrumMeetings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sprint_SprintAttValue", Storage="_SprintAttValues", ThisKey="SprintID", OtherKey="SprintID")]
		public EntitySet<SprintAttValue> SprintAttValues
		{
			get
			{
				return this._SprintAttValues;
			}
			set
			{
				this._SprintAttValues.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sprint_SprintDailyEffort", Storage="_SprintDailyEfforts", ThisKey="SprintID", OtherKey="SprintID")]
		public EntitySet<SprintDailyEffort> SprintDailyEfforts
		{
			get
			{
				return this._SprintDailyEfforts;
			}
			set
			{
				this._SprintDailyEfforts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sprint_SprintsBacklog", Storage="_SprintsBacklogs", ThisKey="SprintID", OtherKey="SprintID")]
		public EntitySet<SprintsBacklog> SprintsBacklogs
		{
			get
			{
				return this._SprintsBacklogs;
			}
			set
			{
				this._SprintsBacklogs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_Sprint", Storage="_Project", ThisKey="ProjID", OtherKey="ProjID", IsForeignKey=true)]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.Sprints.Remove(this);
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.Sprints.Add(this);
						this._ProjID = value.ProjID;
					}
					else
					{
						this._ProjID = default(long);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ScrumMeetings(ScrumMeeting entity)
		{
			this.SendPropertyChanging();
			entity.Sprint = this;
		}
		
		private void detach_ScrumMeetings(ScrumMeeting entity)
		{
			this.SendPropertyChanging();
			entity.Sprint = null;
		}
		
		private void attach_SprintAttValues(SprintAttValue entity)
		{
			this.SendPropertyChanging();
			entity.Sprint = this;
		}
		
		private void detach_SprintAttValues(SprintAttValue entity)
		{
			this.SendPropertyChanging();
			entity.Sprint = null;
		}
		
		private void attach_SprintDailyEfforts(SprintDailyEffort entity)
		{
			this.SendPropertyChanging();
			entity.Sprint = this;
		}
		
		private void detach_SprintDailyEfforts(SprintDailyEffort entity)
		{
			this.SendPropertyChanging();
			entity.Sprint = null;
		}
		
		private void attach_SprintsBacklogs(SprintsBacklog entity)
		{
			this.SendPropertyChanging();
			entity.Sprint = this;
		}
		
		private void detach_SprintsBacklogs(SprintsBacklog entity)
		{
			this.SendPropertyChanging();
			entity.Sprint = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SprintsBacklog")]
	public partial class SprintsBacklog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _SprintID;
		
		private long _IssueID;
		
		private EntityRef<Issue> _Issue;
		
		private EntityRef<Sprint> _Sprint;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSprintIDChanging(long value);
    partial void OnSprintIDChanged();
    partial void OnIssueIDChanging(long value);
    partial void OnIssueIDChanged();
    #endregion
		
		public SprintsBacklog()
		{
			this._Issue = default(EntityRef<Issue>);
			this._Sprint = default(EntityRef<Sprint>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SprintID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long SprintID
		{
			get
			{
				return this._SprintID;
			}
			set
			{
				if ((this._SprintID != value))
				{
					if (this._Sprint.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSprintIDChanging(value);
					this.SendPropertyChanging();
					this._SprintID = value;
					this.SendPropertyChanged("SprintID");
					this.OnSprintIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IssueID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long IssueID
		{
			get
			{
				return this._IssueID;
			}
			set
			{
				if ((this._IssueID != value))
				{
					if (this._Issue.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIssueIDChanging(value);
					this.SendPropertyChanging();
					this._IssueID = value;
					this.SendPropertyChanged("IssueID");
					this.OnIssueIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Issue_SprintsBacklog", Storage="_Issue", ThisKey="IssueID", OtherKey="IssueID", IsForeignKey=true)]
		public Issue Issue
		{
			get
			{
				return this._Issue.Entity;
			}
			set
			{
				Issue previousValue = this._Issue.Entity;
				if (((previousValue != value) 
							|| (this._Issue.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Issue.Entity = null;
						previousValue.SprintsBacklogs.Remove(this);
					}
					this._Issue.Entity = value;
					if ((value != null))
					{
						value.SprintsBacklogs.Add(this);
						this._IssueID = value.IssueID;
					}
					else
					{
						this._IssueID = default(long);
					}
					this.SendPropertyChanged("Issue");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sprint_SprintsBacklog", Storage="_Sprint", ThisKey="SprintID", OtherKey="SprintID", IsForeignKey=true)]
		public Sprint Sprint
		{
			get
			{
				return this._Sprint.Entity;
			}
			set
			{
				Sprint previousValue = this._Sprint.Entity;
				if (((previousValue != value) 
							|| (this._Sprint.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Sprint.Entity = null;
						previousValue.SprintsBacklogs.Remove(this);
					}
					this._Sprint.Entity = value;
					if ((value != null))
					{
						value.SprintsBacklogs.Add(this);
						this._SprintID = value.SprintID;
					}
					else
					{
						this._SprintID = default(long);
					}
					this.SendPropertyChanged("Sprint");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SubCompAttributes")]
	public partial class SubCompAttribute : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SubCompAttID;
		
		private string _SubCompAttName;
		
		private int _FieldType;
		
		private string _DefaultValue;
		
		private bool _CanNull;
		
		private System.Nullable<int> _RegularExpression;
		
		private bool _IsSystemLevel;
		
		private EntitySet<SubCompAttValue> _SubCompAttValues;
		
		private EntityRef<FieldType> _FieldType1;
		
		private EntityRef<RegularExpression> _RegularExpression1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSubCompAttIDChanging(int value);
    partial void OnSubCompAttIDChanged();
    partial void OnSubCompAttNameChanging(string value);
    partial void OnSubCompAttNameChanged();
    partial void OnFieldTypeChanging(int value);
    partial void OnFieldTypeChanged();
    partial void OnDefaultValueChanging(string value);
    partial void OnDefaultValueChanged();
    partial void OnCanNullChanging(bool value);
    partial void OnCanNullChanged();
    partial void OnRegularExpressionChanging(System.Nullable<int> value);
    partial void OnRegularExpressionChanged();
    partial void OnIsSystemLevelChanging(bool value);
    partial void OnIsSystemLevelChanged();
    #endregion
		
		public SubCompAttribute()
		{
			this._SubCompAttValues = new EntitySet<SubCompAttValue>(new Action<SubCompAttValue>(this.attach_SubCompAttValues), new Action<SubCompAttValue>(this.detach_SubCompAttValues));
			this._FieldType1 = default(EntityRef<FieldType>);
			this._RegularExpression1 = default(EntityRef<RegularExpression>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubCompAttID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SubCompAttID
		{
			get
			{
				return this._SubCompAttID;
			}
			set
			{
				if ((this._SubCompAttID != value))
				{
					this.OnSubCompAttIDChanging(value);
					this.SendPropertyChanging();
					this._SubCompAttID = value;
					this.SendPropertyChanged("SubCompAttID");
					this.OnSubCompAttIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubCompAttName", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string SubCompAttName
		{
			get
			{
				return this._SubCompAttName;
			}
			set
			{
				if ((this._SubCompAttName != value))
				{
					this.OnSubCompAttNameChanging(value);
					this.SendPropertyChanging();
					this._SubCompAttName = value;
					this.SendPropertyChanged("SubCompAttName");
					this.OnSubCompAttNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FieldType", DbType="Int NOT NULL")]
		public int FieldType
		{
			get
			{
				return this._FieldType;
			}
			set
			{
				if ((this._FieldType != value))
				{
					if (this._FieldType1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFieldTypeChanging(value);
					this.SendPropertyChanging();
					this._FieldType = value;
					this.SendPropertyChanged("FieldType");
					this.OnFieldTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DefaultValue", DbType="VarChar(MAX)")]
		public string DefaultValue
		{
			get
			{
				return this._DefaultValue;
			}
			set
			{
				if ((this._DefaultValue != value))
				{
					this.OnDefaultValueChanging(value);
					this.SendPropertyChanging();
					this._DefaultValue = value;
					this.SendPropertyChanged("DefaultValue");
					this.OnDefaultValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CanNull", DbType="Bit NOT NULL")]
		public bool CanNull
		{
			get
			{
				return this._CanNull;
			}
			set
			{
				if ((this._CanNull != value))
				{
					this.OnCanNullChanging(value);
					this.SendPropertyChanging();
					this._CanNull = value;
					this.SendPropertyChanged("CanNull");
					this.OnCanNullChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegularExpression", DbType="Int")]
		public System.Nullable<int> RegularExpression
		{
			get
			{
				return this._RegularExpression;
			}
			set
			{
				if ((this._RegularExpression != value))
				{
					if (this._RegularExpression1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRegularExpressionChanging(value);
					this.SendPropertyChanging();
					this._RegularExpression = value;
					this.SendPropertyChanged("RegularExpression");
					this.OnRegularExpressionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsSystemLevel", DbType="Bit NOT NULL")]
		public bool IsSystemLevel
		{
			get
			{
				return this._IsSystemLevel;
			}
			set
			{
				if ((this._IsSystemLevel != value))
				{
					this.OnIsSystemLevelChanging(value);
					this.SendPropertyChanging();
					this._IsSystemLevel = value;
					this.SendPropertyChanged("IsSystemLevel");
					this.OnIsSystemLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SubCompAttribute_SubCompAttValue", Storage="_SubCompAttValues", ThisKey="SubCompAttID", OtherKey="SubCompAttID")]
		public EntitySet<SubCompAttValue> SubCompAttValues
		{
			get
			{
				return this._SubCompAttValues;
			}
			set
			{
				this._SubCompAttValues.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FieldType_SubCompAttribute", Storage="_FieldType1", ThisKey="FieldType", OtherKey="FieldID", IsForeignKey=true)]
		public FieldType FieldType1
		{
			get
			{
				return this._FieldType1.Entity;
			}
			set
			{
				FieldType previousValue = this._FieldType1.Entity;
				if (((previousValue != value) 
							|| (this._FieldType1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FieldType1.Entity = null;
						previousValue.SubCompAttributes.Remove(this);
					}
					this._FieldType1.Entity = value;
					if ((value != null))
					{
						value.SubCompAttributes.Add(this);
						this._FieldType = value.FieldID;
					}
					else
					{
						this._FieldType = default(int);
					}
					this.SendPropertyChanged("FieldType1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RegularExpression_SubCompAttribute", Storage="_RegularExpression1", ThisKey="RegularExpression", OtherKey="ExpressionID", IsForeignKey=true)]
		public RegularExpression RegularExpression1
		{
			get
			{
				return this._RegularExpression1.Entity;
			}
			set
			{
				RegularExpression previousValue = this._RegularExpression1.Entity;
				if (((previousValue != value) 
							|| (this._RegularExpression1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RegularExpression1.Entity = null;
						previousValue.SubCompAttributes.Remove(this);
					}
					this._RegularExpression1.Entity = value;
					if ((value != null))
					{
						value.SubCompAttributes.Add(this);
						this._RegularExpression = value.ExpressionID;
					}
					else
					{
						this._RegularExpression = default(Nullable<int>);
					}
					this.SendPropertyChanged("RegularExpression1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SubCompAttValues(SubCompAttValue entity)
		{
			this.SendPropertyChanging();
			entity.SubCompAttribute = this;
		}
		
		private void detach_SubCompAttValues(SubCompAttValue entity)
		{
			this.SendPropertyChanging();
			entity.SubCompAttribute = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SubCompAttValues")]
	public partial class SubCompAttValue : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _SubCompID;
		
		private int _SubCompAttID;
		
		private string _Value;
		
		private EntityRef<SubCompAttribute> _SubCompAttribute;
		
		private EntityRef<SubComponent> _SubComponent;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSubCompIDChanging(long value);
    partial void OnSubCompIDChanged();
    partial void OnSubCompAttIDChanging(int value);
    partial void OnSubCompAttIDChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    #endregion
		
		public SubCompAttValue()
		{
			this._SubCompAttribute = default(EntityRef<SubCompAttribute>);
			this._SubComponent = default(EntityRef<SubComponent>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubCompID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long SubCompID
		{
			get
			{
				return this._SubCompID;
			}
			set
			{
				if ((this._SubCompID != value))
				{
					if (this._SubComponent.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubCompIDChanging(value);
					this.SendPropertyChanging();
					this._SubCompID = value;
					this.SendPropertyChanged("SubCompID");
					this.OnSubCompIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubCompAttID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SubCompAttID
		{
			get
			{
				return this._SubCompAttID;
			}
			set
			{
				if ((this._SubCompAttID != value))
				{
					if (this._SubCompAttribute.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubCompAttIDChanging(value);
					this.SendPropertyChanging();
					this._SubCompAttID = value;
					this.SendPropertyChanged("SubCompAttID");
					this.OnSubCompAttIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="VarChar(MAX)")]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SubCompAttribute_SubCompAttValue", Storage="_SubCompAttribute", ThisKey="SubCompAttID", OtherKey="SubCompAttID", IsForeignKey=true)]
		public SubCompAttribute SubCompAttribute
		{
			get
			{
				return this._SubCompAttribute.Entity;
			}
			set
			{
				SubCompAttribute previousValue = this._SubCompAttribute.Entity;
				if (((previousValue != value) 
							|| (this._SubCompAttribute.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SubCompAttribute.Entity = null;
						previousValue.SubCompAttValues.Remove(this);
					}
					this._SubCompAttribute.Entity = value;
					if ((value != null))
					{
						value.SubCompAttValues.Add(this);
						this._SubCompAttID = value.SubCompAttID;
					}
					else
					{
						this._SubCompAttID = default(int);
					}
					this.SendPropertyChanged("SubCompAttribute");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SubComponent_SubCompAttValue", Storage="_SubComponent", ThisKey="SubCompID", OtherKey="SubCompID", IsForeignKey=true)]
		public SubComponent SubComponent
		{
			get
			{
				return this._SubComponent.Entity;
			}
			set
			{
				SubComponent previousValue = this._SubComponent.Entity;
				if (((previousValue != value) 
							|| (this._SubComponent.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SubComponent.Entity = null;
						previousValue.SubCompAttValues.Remove(this);
					}
					this._SubComponent.Entity = value;
					if ((value != null))
					{
						value.SubCompAttValues.Add(this);
						this._SubCompID = value.SubCompID;
					}
					else
					{
						this._SubCompID = default(long);
					}
					this.SendPropertyChanged("SubComponent");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SubComponents")]
	public partial class SubComponent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _SubCompID;
		
		private long _CompID;
		
		private EntitySet<SubCompAttValue> _SubCompAttValues;
		
		private EntityRef<Component> _Component;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSubCompIDChanging(long value);
    partial void OnSubCompIDChanged();
    partial void OnCompIDChanging(long value);
    partial void OnCompIDChanged();
    #endregion
		
		public SubComponent()
		{
			this._SubCompAttValues = new EntitySet<SubCompAttValue>(new Action<SubCompAttValue>(this.attach_SubCompAttValues), new Action<SubCompAttValue>(this.detach_SubCompAttValues));
			this._Component = default(EntityRef<Component>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubCompID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long SubCompID
		{
			get
			{
				return this._SubCompID;
			}
			set
			{
				if ((this._SubCompID != value))
				{
					this.OnSubCompIDChanging(value);
					this.SendPropertyChanging();
					this._SubCompID = value;
					this.SendPropertyChanged("SubCompID");
					this.OnSubCompIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompID", DbType="BigInt NOT NULL")]
		public long CompID
		{
			get
			{
				return this._CompID;
			}
			set
			{
				if ((this._CompID != value))
				{
					if (this._Component.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompIDChanging(value);
					this.SendPropertyChanging();
					this._CompID = value;
					this.SendPropertyChanged("CompID");
					this.OnCompIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SubComponent_SubCompAttValue", Storage="_SubCompAttValues", ThisKey="SubCompID", OtherKey="SubCompID")]
		public EntitySet<SubCompAttValue> SubCompAttValues
		{
			get
			{
				return this._SubCompAttValues;
			}
			set
			{
				this._SubCompAttValues.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Component_SubComponent", Storage="_Component", ThisKey="CompID", OtherKey="CompID", IsForeignKey=true)]
		public Component Component
		{
			get
			{
				return this._Component.Entity;
			}
			set
			{
				Component previousValue = this._Component.Entity;
				if (((previousValue != value) 
							|| (this._Component.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Component.Entity = null;
						previousValue.SubComponents.Remove(this);
					}
					this._Component.Entity = value;
					if ((value != null))
					{
						value.SubComponents.Add(this);
						this._CompID = value.CompID;
					}
					else
					{
						this._CompID = default(long);
					}
					this.SendPropertyChanged("Component");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SubCompAttValues(SubCompAttValue entity)
		{
			this.SendPropertyChanging();
			entity.SubComponent = this;
		}
		
		private void detach_SubCompAttValues(SubCompAttValue entity)
		{
			this.SendPropertyChanging();
			entity.SubComponent = null;
		}
	}
}
#pragma warning restore 1591
